(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'kotlinx-benchmark-kotlinx-benchmark-runtime-js-legacy'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlinx-benchmark-kotlinx-benchmark-runtime-js-legacy'.");
    }
    root['kotlinx-benchmark-kotlinx-benchmark-runtime-js-legacy'] = factory(typeof this['kotlinx-benchmark-kotlinx-benchmark-runtime-js-legacy'] === 'undefined' ? {} : this['kotlinx-benchmark-kotlinx-benchmark-runtime-js-legacy'], kotlin);
  }
}(this, function (_, Kotlin) {
  'use strict';
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var UnsupportedOperationException_init = Kotlin.kotlin.UnsupportedOperationException_init_pdl1vj$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var equals = Kotlin.equals;
  var ensureNotNull = Kotlin.ensureNotNull;
  var toSet = Kotlin.kotlin.collections.toSet_7wnvza$;
  var repeat = Kotlin.kotlin.text.repeat_94bcnn$;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var split = Kotlin.kotlin.text.split_ip8yn$;
  var take = Kotlin.kotlin.collections.take_ba2ldo$;
  var toBoxedChar = Kotlin.toBoxedChar;
  var drop = Kotlin.kotlin.collections.drop_ba2ldo$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var replace = Kotlin.kotlin.text.replace_680rmw$;
  var getCallableRef = Kotlin.getCallableRef;
  var unboxChar = Kotlin.unboxChar;
  var toChar = Kotlin.toChar;
  var toString = Kotlin.kotlin.text.toString_dqglrj$;
  var JsMath = Math;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var NoSuchElementException_init = Kotlin.kotlin.NoSuchElementException_init;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var mapCapacity = Kotlin.kotlin.collections.mapCapacity_za3lpa$;
  var coerceAtLeast = Kotlin.kotlin.ranges.coerceAtLeast_dqglrj$;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_bwtc7$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var L1 = Kotlin.Long.ONE;
  var L1000 = Kotlin.Long.fromInt(1000);
  var L1000000 = Kotlin.Long.fromInt(1000000);
  var L1000000000 = Kotlin.Long.fromInt(1000000000);
  var L60000000000 = new Kotlin.Long(-129542144, 13);
  var NoSuchElementException = Kotlin.kotlin.NoSuchElementException;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var toLong = Kotlin.kotlin.text.toLong_pdl1vz$;
  var uppercaseChar = Kotlin.kotlin.text.uppercaseChar_myv2d0$;
  var toBooleanStrict = Kotlin.kotlin.text.toBooleanStrict_pdl1vz$;
  var removeSurrounding = Kotlin.kotlin.text.removeSurrounding_90ijwr$;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var L0 = Kotlin.Long.ZERO;
  var encodeToByteArray = Kotlin.kotlin.text.encodeToByteArray_pdl1vz$;
  var concatToString = Kotlin.kotlin.text.concatToString_355ntz$;
  var isNaN_0 = Kotlin.kotlin.isNaN_yrwdxr$;
  var numberToInt = Kotlin.numberToInt;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var single = Kotlin.kotlin.collections.single_2p1efm$;
  var substringBefore = Kotlin.kotlin.text.substringBefore_j4ogox$;
  var toString_0 = Kotlin.toString;
  var lines = Kotlin.kotlin.text.lines_gw00vp$;
  var LinkedHashMap_init_0 = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_mh5how$;
  var List = Kotlin.kotlin.collections.List;
  var throwCCE = Kotlin.throwCCE;
  var Unit = Kotlin.kotlin.Unit;
  var get_indices = Kotlin.kotlin.collections.get_indices_gzk92b$;
  var Collection = Kotlin.kotlin.collections.Collection;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var Annotation = Kotlin.kotlin.Annotation;
  var BenchmarkProgress$Companion_instance = null;
  var BenchmarkProgress$FinishStatus$Success_instance;
  var BenchmarkProgress$FinishStatus$Failure_instance;
  var BenchmarkReportFormatter$Companion_instance = null;
  var TextBenchmarkReportFormatter_instance = null;
  var JsonBenchmarkReportFormatter_instance = null;
  var NativeFork$PerBenchmark_instance;
  var NativeFork$PerIteration_instance;
  var BenchmarkConfiguration$Companion_instance = null;
  var BASE64_ALPHABET;
  var BASE64_MASK;
  var BASE64_PAD;
  var ReportBenchmarksStatistics$Companion_instance = null;
  var zeroThreshold;
  var DefaultDescriptorParameters_instance = null;
  var Scope$Benchmark_instance;
  var Mode$Throughput_instance;
  var Mode$AverageTime_instance;
  var BenchmarkTimeUnit$NANOSECONDS_instance;
  var BenchmarkTimeUnit$MICROSECONDS_instance;
  var BenchmarkTimeUnit$MILLISECONDS_instance;
  var BenchmarkTimeUnit$SECONDS_instance;
  var BenchmarkTimeUnit$MINUTES_instance;
  var fs;
  var process;
  BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  BASE64_MASK = 63;
  BASE64_PAD = 61;
  zeroThreshold = 1.0 / JsMath.pow(10.0, 3) / 2;
  process = require('process');
}));

//# sourceMappingURL=kotlinx-benchmark-kotlinx-benchmark-runtime-js-legacy.js.map
