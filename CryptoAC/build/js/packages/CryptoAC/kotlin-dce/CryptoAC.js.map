{"version":3,"file":"CryptoAC.js","sources":["../kotlin/common/src/generated/_Collections.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/request/RequestBody.kt","../../../../../ktor-utils/js/src/io/ktor/util/reflect/TypeInfoJs.kt","../../../../../ktor-utils/common/src/io/ktor/util/reflect/Type.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/request/builders.kt","../kotlin/src/kotlin/text/regex/RegexExtensions.kt","../kotlin/src/kotlin/collections/Sets.kt","../../../../../core/commonMain/src/kotlinx/serialization/Serializers.kt","../../../../../core/commonMain/src/kotlinx/serialization/internal/Platform.common.kt","../../../../../core/commonMain/src/kotlinx/serialization/modules/SerializersModuleBuilders.kt","../kotlin/src/kotlin/util/Preconditions.kt","../../../../../ktor-io/common/src/io/ktor/utils/io/core/Strings.kt","../kotlin/src/kotlin/text/Strings.kt","../kotlin/kotlin-styled.js","../kotlin/kotlin-react-dom-legacy.js","../kotlin/src/kotlin/collections/Collections.kt","../../../../../ktor-http/common/src/io/ktor/http/Parameters.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/request/forms/formBuilders.kt","../kotlin/src/kotlin/util/Standard.kt","../kotlin/js/src/generated/_ComparisonsJs.kt","../kotlin/src/kotlin/comparisons/Comparisons.kt","../kotlin/js/src/kotlin/collections.kt","../../../../../ktor-http/common/src/io/ktor/http/Headers.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/API.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/Constants.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/CryptoACFormField.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/InputType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/OutcomeCode.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/PolicyModel.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/SERVER.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/SafeRegex.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/ACType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/dynsec/ACServiceRBACDynSecParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/dynsec/DynSecGenericResponse.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/dynsec/DynSecGetClientResponse.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/dynsec/DynSecGetRoleResponse.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/dynsec/DynSecListRolesResponse.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/opa/ACServiceRBACOPAParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/opa/OPADocument.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/opa/OPADocumentRBAC.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/opa/OPAEval.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/opa/OPAPermission.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/ac/xacmlauthzforce/ACServiceRBACXACMLAuthzForceParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/core/CoreParameters.kt","../../../../../core/commonMain/src/kotlinx/serialization/modules/PolymorphicModuleBuilder.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/core/CoreParametersABAC.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/core/CoreParametersRBAC.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/core/CoreType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/core/mqtt/MQTTMessage.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/crypto/AsymKeys.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/crypto/AsymKeysType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/crypto/CryptoABEType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/crypto/CryptoType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/crypto/EncryptedAsymKeys.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/crypto/EncryptedSymKey.kt","../kotlin/common/src/generated/_Arrays.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/dm/DMServiceRemoteUPParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/dm/DMType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/dm/cryptoac/DMServiceCryptoACParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/dm/mqtt/DMServiceMQTTParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/mm/MMServiceRemoteUPParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/mm/MMType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/mm/mysql/MMServiceABACMySQLParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/mm/mysql/MMServiceRBACMySQLParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/mm/redis/MMServiceRedisParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/CodeCoreParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/CodeServiceParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/Element.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/ElementType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/tuple/AccessStructure.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/tuple/PermissionTuple.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/tuple/Tuple.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/tuple/PermissionType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/tuple/RoleTuple.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/Attribute.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/EnforcementType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/Resource.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/Role.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/UnitElement.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/UnitElementStatus.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/UnitElementWithKeys.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/model/unit/User.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/parameters/RemoteServiceParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/parameters/UPServiceParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/rm/RMServiceRemoteUPParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/rm/RMType.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/rm/cryptoac/RMRBACCryptoACParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/rm/cryptoac/RMServiceRBACCryptoACParameters.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/rm/model/AddResourceRBACRequest.kt","../../../../../src/commonMain/kotlin/eu/fbk/st/cryptoac/rm/model/WriteResourceRBACRequest.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/App.kt","../kotlin/src/kotlin/collections/Maps.kt","../kotlin/common/src/generated/_Maps.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/call/HttpClientCall.kt","../../../../../core/commonMain/src/kotlinx/serialization/SerialFormat.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/Login.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/Main.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/Themes.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACAlert.kt","../kotlin/js/src/kotlin/text/string.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACButtonAndIcon.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACButtonAndIconGroup.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACCheckbox.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACDivider.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACEditProfileForm.kt","../kotlin/js/src/org.w3c/org.w3c.files.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACForm.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACPaper.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACRadioGroup.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACScore.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACSelect.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACSlider.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/CryptoACTextField.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/table/CryptoACTable.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/table/CryptoACTableColumn.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/components/custom/table/CryptoACTableData.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/dashboard/Dashboard.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/dashboard/RBACCryptoACDashboard.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/dashboard/RBACDashboard.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/dashboard/RBACMQTTDashboard.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/newProfile/ModuleItem.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/newProfile/NewProfile.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/Architecture.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/Assignment.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/Attacker.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/EntityIcon.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/Requirement.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/RequirementItem.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/TradeOffBoard.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/content/tradeoffboard/TrustAssumptionsLikelihood.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/sidebar/Actions.kt","../kotlin/src/kotlin/collections/MutableCollections.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/sidebar/Configuration.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/sidebar/Empty.kt","../../../../../src/jsMain/kotlin/eu/fbk/st/cryptoac/view/sidebar/Evaluation.kt"],"sourcesContent":["/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the collection was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Double>.max(): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Float>.max(): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Double>.min(): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Float>.min(): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * Before Kotlin 1.6, the [elements] array may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.convertToSetForSetOperation()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * Before Kotlin 1.6, the [elements] collection may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * Before Kotlin 1.6, the [elements] sequence may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.convertToSetForSetOperation()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.client.request\n\nimport io.ktor.client.utils.*\nimport io.ktor.http.content.*\nimport io.ktor.util.*\nimport io.ktor.util.reflect.*\n\ninternal val BodyTypeAttributeKey: AttributeKey<TypeInfo> = AttributeKey(\"BodyTypeAttributeKey\")\n\n@OptIn(InternalAPI::class)\npublic inline fun <reified T> HttpRequestBuilder.setBody(body: T) {\n    when (body) {\n        null -> {\n            this.body = NullBody\n            bodyType = typeInfo<T>()\n        }\n        is OutgoingContent -> {\n            this.body = body\n            bodyType = null\n        }\n        else -> {\n            this.body = body\n            bodyType = typeInfo<T>()\n        }\n    }\n}\n\n@OptIn(InternalAPI::class)\npublic fun HttpRequestBuilder.setBody(body: Any?, bodyType: TypeInfo) {\n    this.body = body ?: NullBody\n    this.bodyType = bodyType\n}\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.reflect\n\nimport kotlin.reflect.*\n\npublic actual interface Type\n\npublic object JsType : Type\n\n@OptIn(ExperimentalStdlibApi::class)\npublic actual inline fun <reified T> typeInfo(): TypeInfo = typeInfoImpl(JsType, T::class, tryGetType<T>())\n\npublic fun typeInfoImpl(reifiedType: Type, kClass: KClass<*>, kType: KType?): TypeInfo =\n    TypeInfo(kClass, reifiedType, kType)\n\n/**\n * Check [this] is instance of [type].\n */\npublic actual fun Any.instanceOf(type: KClass<*>): Boolean = type.isInstance(this)\n\npublic actual val KType.platformType: Type\n    get() = JsType\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.reflect\n\nimport kotlin.reflect.*\n\n/**\n * Information about type.\n */\npublic expect interface Type\n\npublic expect val KType.platformType: Type\n\n/**\n * Ktor type information.\n * @property type: source KClass<*>\n * @property reifiedType: type with substituted generics\n * @property kotlinType: kotlin reified type with all generic type parameters.\n */\npublic data class TypeInfo(\n    public val type: KClass<*>,\n    public val reifiedType: Type,\n    public val kotlinType: KType? = null\n)\n\n/**\n * Returns [TypeInfo] for the specified type [T]\n */\npublic expect inline fun <reified T> typeInfo(): TypeInfo\n\n/**\n * Check [this] is instance of [type].\n */\npublic expect fun Any.instanceOf(type: KClass<*>): Boolean\n\n@PublishedApi\n@OptIn(ExperimentalStdlibApi::class)\ninternal inline fun <reified T> tryGetType(): KType? = try {\n    // We need to wrap getting type in try catch because of https://youtrack.jetbrains.com/issue/KT-42913\n    typeOf<T>()\n} catch (cause: Throwable) {\n    null\n}\n","/*\n* Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n*/\n\npackage io.ktor.client.request\n\nimport io.ktor.client.*\nimport io.ktor.client.call.*\nimport io.ktor.client.statement.*\nimport io.ktor.client.utils.*\nimport io.ktor.http.*\nimport io.ktor.util.*\nimport kotlin.jvm.*\n\n/**\n * Executes a [HttpClient] request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.request(\n    builder: HttpRequestBuilder = HttpRequestBuilder()\n): HttpResponse = HttpStatement(builder, this).execute()\n\n/**\n * Prepares a [HttpClient] request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareRequest(\n    builder: HttpRequestBuilder = HttpRequestBuilder()\n): HttpStatement = HttpStatement(builder, this)\n\n/**\n * Executes a [HttpClient] request, with the information configured in [builder] block\n */\npublic suspend inline fun HttpClient.request(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    request(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] request, with the information configured in [builder] block\n */\npublic suspend inline fun HttpClient.prepareRequest(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    prepareRequest(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] request, with the [urlString] and the information configured in builder [block]\n */\npublic suspend inline fun HttpClient.request(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = request {\n    url(urlString)\n    block()\n}\n\n/**\n * Prepares a [HttpClient] request, with the [urlString] and the information configured in builder [block]\n */\npublic suspend inline fun HttpClient.prepareRequest(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareRequest {\n    url(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] request, with the [url] and the information configured in builder [block]\n */\npublic suspend inline fun HttpClient.request(\n    url: Url,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = request {\n    url(url)\n    block()\n}\n\n/**\n * Prepares a [HttpClient] request, with the [url] and the information configured in builder [block]\n */\npublic suspend inline fun HttpClient.prepareRequest(\n    url: Url,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareRequest {\n    url(url)\n    block()\n}\n\n/**\n * Executes a [HttpClient] GET request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.get(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Get\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] POST request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.post(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Post\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] PUT request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.put(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Put\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] DELETE request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.delete(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Delete\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] OPTIONS request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.options(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Options\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] PATCH request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.patch(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Patch\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] HEAD request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.head(builder: HttpRequestBuilder): HttpResponse {\n    builder.method = HttpMethod.Head\n    return request(builder)\n}\n\n/**\n * Prepares a [HttpClient] GET request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareGet(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Get\n    return prepareRequest(builder)\n}\n\n/**\n * Prepares a [HttpClient] POST request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.preparePost(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Post\n    return prepareRequest(builder)\n}\n\n/**\n * Prepares a [HttpClient] PUT request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.preparePut(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Put\n    return prepareRequest(builder)\n}\n\n/**\n * Prepares a [HttpClient] DELETE request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareDelete(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Delete\n    return prepareRequest(builder)\n}\n\n/**\n * Prepares a [HttpClient] OPTIONS request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareOptions(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Options\n    return prepareRequest(builder)\n}\n\n/**\n * Prepares a [HttpClient] PATCH request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.preparePatch(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Patch\n    return prepareRequest(builder)\n}\n\n/**\n * Prepares a [HttpClient] HEAD request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareHead(builder: HttpRequestBuilder): HttpStatement {\n    builder.method = HttpMethod.Head\n    return prepareRequest(builder)\n}\n\n/**\n * Executes a [HttpClient] GET request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.get(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    get(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] POST request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.post(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    post(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] PUT request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.put(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    put(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] DELETE request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.delete(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    delete(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] OPTIONS request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.options(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    options(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] PATCH request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.patch(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    patch(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] HEAD request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.head(block: HttpRequestBuilder.() -> Unit): HttpResponse =\n    head(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] GET request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareGet(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    prepareGet(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] POST request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.preparePost(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    preparePost(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] PUT request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.preparePut(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    preparePut(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] DELETE request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareDelete(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    prepareDelete(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] OPTIONS request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareOptions(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    prepareOptions(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] PATCH request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.preparePatch(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    preparePatch(HttpRequestBuilder().apply(block))\n\n/**\n * Prepares a [HttpClient] HEAD request, with the information from the [builder]\n */\npublic suspend inline fun HttpClient.prepareHead(block: HttpRequestBuilder.() -> Unit): HttpStatement =\n    prepareHead(HttpRequestBuilder().apply(block))\n\n/**\n * Creates a [HttpRequestBuilder] and configures it with a [block] of code.\n */\npublic fun request(block: HttpRequestBuilder.() -> Unit): HttpRequestBuilder =\n    HttpRequestBuilder().apply(block)\n\n/**\n * Executes a [HttpClient] GET request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.get(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = get { url(urlString); block() }\n\n/**\n * Executes a [HttpClient] POST request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.post(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = post { url(urlString); block() }\n\n/**\n * Executes a [HttpClient] PUT request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.put(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = put { url(urlString); block() }\n\n/**\n * Executes a [HttpClient] DELETE request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.delete(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = delete { url(urlString); block() }\n\n/**\n * Executes a [HttpClient] OPTIONS request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.options(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = options { url(urlString); block() }\n\n/**\n * Executes a [HttpClient] PATCH request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.patch(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = patch { url(urlString); block() }\n\n/**\n * Executes a [HttpClient] HEAD request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.head(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = head { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] GET request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.prepareGet(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareGet { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] POST request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.preparePost(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = preparePost { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] PUT request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.preparePut(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = preparePut { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] DELETE request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.prepareDelete(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareDelete { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] OPTIONS request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.prepareOptions(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareOptions { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] PATCH request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.preparePatch(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = preparePatch { url(urlString); block() }\n\n/**\n * Prepares a [HttpClient] HEAD request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n */\npublic suspend inline fun HttpClient.prepareHead(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareHead { url(urlString); block() }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(element: T?): Set<T> = if (element != null) setOf(element) else emptySet()\n\n/**\n * Returns a new read-only set only with those given elements, that are not null.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(vararg elements: T?): Set<T> {\n    return elements.filterNotNullTo(LinkedHashSet())\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * The returned set is serializable (JVM).\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * The returned set is serializable (JVM).\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","package io.ktor.utils.io.core\n\nimport io.ktor.utils.io.charsets.*\nimport io.ktor.utils.io.core.internal.*\n\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun String.toByteArray(charset: Charset = Charsets.UTF_8): ByteArray {\n    if (charset == Charsets.UTF_8) return encodeToByteArray()\n\n    return charset.newEncoder().encodeToByteArray(this, 0, length)\n}\n\n/**\n * Create an instance of [String] from the specified [bytes] range starting at [offset] and bytes [length]\n * interpreting characters in the specified [charset].\n */\n@Suppress(\"FunctionName\")\npublic expect fun String(\n    bytes: ByteArray,\n    offset: Int = 0,\n    length: Int = bytes.size,\n    charset: Charset = Charsets.UTF_8\n): String\n\n/**\n * Read a string line considering optionally specified [estimate] but up to optional [limit] characters length\n * (does fail once limit exceeded) or return `null` if the packet is empty\n */\npublic fun ByteReadPacket.readUTF8Line(estimate: Int = 16, limit: Int = Int.MAX_VALUE): String? {\n    if (isEmpty) return null\n    val sb = StringBuilder(estimate)\n    return if (readUTF8LineTo(sb, limit)) sb.toString() else null\n}\n\n/**\n * Read a string line considering optionally specified [estimate] but up to optional [limit] characters length\n * (does fail once limit exceeded) or return `null` if the packet is empty\n */\npublic fun Input.readUTF8Line(estimate: Int = 16, limit: Int = Int.MAX_VALUE): String? {\n    val sb = StringBuilder(estimate)\n    return if (readUTF8LineTo(sb, limit)) sb.toString() else null\n}\n\n/**\n * Reads UTF-8 line and append all line characters to [out] except line endings. Supports CR, LF and CR+LF\n * @return `true` if some characters were appended or line ending reached (empty line) or `false` if packet\n * is empty\n */\npublic fun Input.readUTF8LineTo(out: Appendable, limit: Int): Boolean {\n    var decoded = 0\n    var size = 1\n    var cr = false\n    var end = false\n\n    takeWhileSize { buffer ->\n        var skip = 0\n        size = buffer.decodeUTF8 { ch ->\n            when (ch) {\n                '\\r' -> {\n                    if (cr) {\n                        end = true\n                        return@decodeUTF8 false\n                    }\n                    cr = true\n                    true\n                }\n                '\\n' -> {\n                    end = true\n                    skip = 1\n                    false\n                }\n                else -> {\n                    if (cr) {\n                        end = true\n                        return@decodeUTF8 false\n                    }\n\n                    if (decoded == limit) bufferLimitExceeded(limit)\n                    decoded++\n                    out.append(ch)\n                    true\n                }\n            }\n        }\n\n        if (skip > 0) {\n            buffer.discardExact(skip)\n        }\n\n        if (end) 0 else size.coerceAtLeast(1)\n    }\n\n    if (size > 1) prematureEndOfStream(size)\n\n    return decoded > 0 || !endOfInput\n}\n\n/**\n * Reads UTF-8 characters until one of the specified [delimiters] found, [limit] exceeded or end of stream encountered\n *\n * @throws BufferLimitExceededException\n * @returns a string of characters read before delimiter\n */\n@Suppress(\"unused\")\npublic fun Input.readUTF8UntilDelimiter(delimiters: String, limit: Int = Int.MAX_VALUE): String {\n    return buildString {\n        readUTF8UntilDelimiterTo(this, delimiters, limit)\n    }\n}\n\n/**\n * Reads UTF-8 characters to [out] buffer until one of the specified [delimiters] found, [limit] exceeded\n * or end of stream encountered\n *\n * @throws BufferLimitExceededException\n * @returns number of characters copied (possibly zero)\n */\npublic fun Input.readUTF8UntilDelimiterTo(out: Appendable, delimiters: String, limit: Int = Int.MAX_VALUE): Int {\n    var decoded = 0\n    var delimiter = false\n\n    takeWhile { buffer ->\n        buffer.decodeASCII { ch ->\n            if (ch in delimiters) {\n                delimiter = true\n                false\n            } else {\n                if (decoded == limit) bufferLimitExceeded(limit)\n                decoded++\n                out.append(ch)\n                true\n            }\n        }\n    }\n\n    if (!delimiter) {\n        decoded = readUTF8UntilDelimiterToSlowUtf8(out, delimiters, limit, decoded)\n    }\n\n    return decoded\n}\n\n/**\n * Reads UTF-8 characters to [out] buffer until one of the specified [delimiters] found, [limit] exceeded\n * or end of stream encountered\n *\n * @throws BufferLimitExceededException\n * @returns number of characters copied (possibly zero)\n */\npublic fun Input.readUTF8UntilDelimiterTo(out: Output, delimiters: String, limit: Int = Int.MAX_VALUE): Int {\n    val delimitersCount = delimiters.length\n    if (delimitersCount == 1 && delimiters[0].isAsciiChar()) {\n        return readUntilDelimiter(delimiters[0].code.toByte(), out).toInt()\n    } else if (delimitersCount == 2 && delimiters[0].isAsciiChar() && delimiters[1].isAsciiChar()) {\n        return readUntilDelimiters(delimiters[0].code.toByte(), delimiters[1].code.toByte(), out).toInt()\n    }\n\n    return readUTFUntilDelimiterToSlowAscii(delimiters, limit, out)\n}\n\n/**\n * Read exactly [n] bytes (consumes all remaining if [n] is not specified but up to [Int.MAX_VALUE] bytes).\n * Does fail if not enough bytes remaining.\n */\npublic fun ByteReadPacket.readBytes(\n    n: Int = remaining.coerceAtMostMaxIntOrFail(\"Unable to convert to a ByteArray: packet is too big\")\n): ByteArray = when {\n    n != 0 -> ByteArray(n).also { readFully(it, 0, n) }\n    else -> EmptyByteArray\n}\n\n/**\n * Reads exactly [n] bytes from the input or fails if not enough bytes available.\n */\npublic fun Input.readBytes(n: Int): ByteArray = readBytesOf(n, n)\n\n/**\n * Reads all remaining bytes from the input\n */\npublic fun Input.readBytes(): ByteArray = readBytesOf()\n\n/**\n * Reads at least [min] but no more than [max] bytes from the input to a new byte array\n * @throws EOFException if not enough bytes available to get [min] bytes\n */\npublic fun Input.readBytesOf(min: Int = 0, max: Int = Int.MAX_VALUE): ByteArray = if (min == max && min == 0) {\n    EmptyByteArray\n} else if (min == max) {\n    ByteArray(min).also { readFully(it, 0, min) }\n} else {\n    var array = ByteArray(max.toLong().coerceAtMost(sizeEstimate()).coerceAtLeast(min.toLong()).toInt())\n    var size = 0\n\n    while (size < max) {\n        val partSize = minOf(max, array.size) - size\n        val rc = readAvailable(array, size, partSize)\n        if (rc <= 0) break\n        size += rc\n        if (array.size == size) {\n            array = array.copyOf(size * 2)\n        }\n    }\n\n    if (size < min) {\n        throw EOFException(\"Not enough bytes available to read $min bytes: ${min - size} more required\")\n    }\n\n    if (size == array.size) array else array.copyOf(size)\n}\n\n/**\n * Reads at most [max] characters decoding bytes with specified [charset]. Extra character bytes will remain unconsumed\n * @return number of characters copied to [out]\n */\npublic fun Input.readText(out: Appendable, charset: Charset = Charsets.UTF_8, max: Int = Int.MAX_VALUE): Int {\n    return charset.newDecoder().decode(this, out, max)\n}\n\n/**\n * Reads at most [max] characters decoding bytes with specified [decoder]. Extra character bytes will remain unconsumed\n * @return a decoded string\n */\n@Deprecated(\n    \"Use CharsetDecoder.decode instead\",\n    ReplaceWith(\"decoder.decode(this, max)\", \"io.ktor.utils.io.charsets.decode\")\n)\npublic fun Input.readText(decoder: CharsetDecoder, max: Int = Int.MAX_VALUE): String {\n    return decoder.decode(this, max)\n}\n\n/**\n * Reads at most [max] characters decoding bytes with specified [charset]. Extra character bytes will remain unconsumed\n * @return a decoded string\n */\npublic fun Input.readText(charset: Charset = Charsets.UTF_8, max: Int = Int.MAX_VALUE): String {\n    return charset.newDecoder().decode(this, max)\n}\n\n/**\n * Reads at most [max] characters decoding bytes with specified [charset]. Extra character bytes will remain unconsumed\n * @return a decoded string\n */\npublic fun Buffer.readText(charset: Charset = Charsets.UTF_8, max: Int = Int.MAX_VALUE): String = buildString {\n    charset.newDecoder().decodeBuffer(this@readText, this, true, max)\n}\n\n/**\n * Read exactly [n] characters interpreting bytes in the specified [charset].\n */\n@Deprecated(\n    \"Use readTextExactCharacters instead.\",\n    ReplaceWith(\"readTextExactCharacters(n, charset)\")\n)\npublic fun Input.readTextExact(charset: Charset = Charsets.UTF_8, n: Int): String {\n    return readTextExactCharacters(n, charset)\n}\n\n/**\n * Read exactly [charactersCount] characters interpreting bytes in the specified [charset].\n */\npublic fun Input.readTextExactCharacters(charactersCount: Int, charset: Charset = Charsets.UTF_8): String {\n    val s = readText(charset, charactersCount)\n    if (s.length < charactersCount) {\n        prematureEndOfStreamToReadChars(charactersCount)\n    }\n    return s\n}\n\n/**\n * Read exactly the specified number of [bytes]\n * interpreting bytes in the specified [charset] (optional, UTF-8 by default).\n */\n@Deprecated(\"Parameters order is changed.\", ReplaceWith(\"readTextExactBytes(bytes, charset)\"))\npublic fun Input.readTextExactBytes(charset: Charset = Charsets.UTF_8, bytes: Int): String {\n    return readTextExactBytes(bytes, charset)\n}\n\n/**\n * Read exactly [bytesCount] interpreting bytes in the specified [charset] (optional, UTF-8 by default).\n */\npublic fun Input.readTextExactBytes(bytesCount: Int, charset: Charset = Charsets.UTF_8): String {\n    return charset.newDecoder().decodeExactBytes(this, inputLength = bytesCount)\n}\n\n/**\n * Writes [text] characters in range \\[[fromIndex] .. [toIndex]) with the specified [charset]\n */\npublic fun Output.writeText(\n    text: CharSequence,\n    fromIndex: Int = 0,\n    toIndex: Int = text.length,\n    charset: Charset = Charsets.UTF_8\n) {\n    if (charset === Charsets.UTF_8) {\n        return writeTextUtf8(text, fromIndex, toIndex)\n    }\n\n    charset.newEncoder().encodeToImpl(this, text, fromIndex, toIndex)\n}\n\n/**\n * Writes [text] characters in range \\[[fromIndex] .. [toIndex]) with the specified [charset]\n */\npublic fun Output.writeText(\n    text: CharArray,\n    fromIndex: Int = 0,\n    toIndex: Int = text.size,\n    charset: Charset = Charsets.UTF_8\n) {\n    if (charset === Charsets.UTF_8) {\n        return writeTextUtf8(CharArraySequence(text, 0, text.size), fromIndex, toIndex)\n    }\n\n    charset.newEncoder().encode(text, fromIndex, toIndex, this)\n}\n\nprivate fun Output.writeTextUtf8(text: CharSequence, fromIndex: Int, toIndex: Int) {\n    var index = fromIndex\n    writeWhileSize(1) { buffer ->\n        val memory = buffer.memory\n        val dstOffset = buffer.writePosition\n        val dstLimit = buffer.limit\n\n        val (characters, bytes) = memory.encodeUTF8(text, index, toIndex, dstOffset, dstLimit)\n\n        index += characters.toInt()\n        buffer.commitWritten(bytes.toInt())\n\n        when {\n            characters.toInt() == 0 && index < toIndex -> 8\n            index < toIndex -> 1\n            else -> 0\n        }\n    }\n}\n\ninternal expect fun String.getCharsInternal(dst: CharArray, dstOffset: Int)\n\n@Suppress(\"NOTHING_TO_INLINE\")\nprivate inline fun Char.isAsciiChar() = code <= 0x7f\n\nprivate fun Input.readUTFUntilDelimiterToSlowAscii(delimiters: String, limit: Int, out: Output): Int {\n    var decoded = 0\n    var delimiter = false\n\n    takeWhile { buffer ->\n        val before = buffer.readRemaining\n\n        val rc = buffer.decodeASCII { ch ->\n            if (ch in delimiters) {\n                delimiter = true\n                false\n            } else {\n                if (decoded == limit) bufferLimitExceeded(limit)\n                decoded++\n                true\n            }\n        }\n\n        val delta = before - buffer.readRemaining\n        if (delta > 0) {\n            buffer.rewind(delta)\n            out.writeFully(buffer, delta)\n        }\n\n        rc\n    }\n\n    if (!delimiter && !endOfInput) {\n        decoded = readUTF8UntilDelimiterToSlowUtf8(out, delimiters, limit, decoded)\n    }\n\n    return decoded\n}\n\nprivate fun Input.readUTF8UntilDelimiterToSlowUtf8(\n    out: Output,\n    delimiters: String,\n    limit: Int,\n    decoded0: Int\n): Int {\n    var decoded = decoded0\n    var size = 1\n\n    takeWhileSize { buffer ->\n        val before = buffer.readRemaining\n\n        size = buffer.decodeUTF8 { ch ->\n            if (ch in delimiters) {\n                false\n            } else {\n                if (decoded == limit) {\n                    bufferLimitExceeded(limit)\n                }\n                decoded++\n                true\n            }\n        }\n\n        val delta = before - buffer.readRemaining\n        if (delta > 0) {\n            buffer.rewind(delta)\n            out.writeFully(buffer, delta)\n        }\n\n        size = if (size == -1) 0 else size.coerceAtLeast(1)\n        size\n    }\n\n    if (size > 1) prematureEndOfStream(size)\n\n    return decoded\n}\n\nprivate fun Input.readUTF8UntilDelimiterToSlowUtf8(\n    out: Appendable,\n    delimiters: String,\n    limit: Int,\n    decoded0: Int\n): Int {\n    var decoded = decoded0\n    var size = 1\n\n    takeWhileSize { buffer ->\n        size = buffer.decodeUTF8 { ch ->\n            if (ch in delimiters) {\n                false\n            } else {\n                if (decoded == limit) {\n                    bufferLimitExceeded(limit)\n                }\n                decoded++\n                out.append(ch)\n                true\n            }\n        }\n\n        size = if (size == -1) 0 else size.coerceAtLeast(1)\n        size\n    }\n\n    if (size > 1) prematureEndOfStream(size)\n\n    return decoded\n}\n\nprivate fun bufferLimitExceeded(limit: Int): Nothing {\n    throw BufferLimitExceededException(\"Too many characters before delimiter: limit $limit exceeded\")\n}\n\n@PublishedApi\ninternal fun prematureEndOfStream(size: Int): Nothing =\n    throw EOFException(\"Premature end of stream: expected $size bytes\")\n\n@PublishedApi\ninternal fun prematureEndOfStream(size: Long): Nothing =\n    throw EOFException(\"Premature end of stream: expected $size bytes\")\n\nprivate fun prematureEndOfStreamToReadChars(charactersCount: Int): Nothing =\n    throw EOFException(\"Not enough input bytes to read $charactersCount characters.\")\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmName\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toUpperCase(): String\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.uppercase(): String\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toLowerCase(): String\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.lowercase(): String\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.capitalize(): String\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.decapitalize(): String\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithChar\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> Char): String {\n    return if (isNotEmpty()) transform(this[0]) + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithCharSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> CharSequence): String {\n    return if (isNotEmpty()) transform(this[0]).toString() + substring(1) else this\n}\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    requireNonNegativeLimit(limit)\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    requireNonNegativeLimit(limit)\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\ninternal fun requireNonNegativeLimit(limit: Int) =\n    require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    requireNonNegativeLimit(limit)\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence to a list of strings around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of strings around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n * @sample samples.text.Strings.splitToSequence\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.splitToSequence(regex: Regex, limit: Int = 0): Sequence<String> = regex.splitToSequence(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean\n\ninternal fun CharSequence?.contentEqualsIgnoreCaseImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this.equals(other, ignoreCase = true)\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (!this[i].equals(other[i], ignoreCase = true)) {\n            return false\n        }\n    }\n\n    return true\n}\n\ninternal fun CharSequence?.contentEqualsImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this == other\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (this[i] != other[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and throws an exception otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrict\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrict(): Boolean = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> throw IllegalArgumentException(\"The string doesn't represent a boolean value: $this\")\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and `null` otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrictOrNull\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrictOrNull(): Boolean? = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> null\n}",null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * The returned list is serializable (JVM).\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * The returned list is serializable (JVM).\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n* Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n*/\n\npackage io.ktor.http\n\nimport io.ktor.util.*\n\n/**\n * Represents HTTP parameters as a map from case-insensitive names to collection of [String] values\n */\npublic interface Parameters : StringValues {\n    public companion object {\n        /**\n         * Empty [Parameters] instance\n         */\n        public val Empty: Parameters = EmptyParameters\n\n        /**\n         * Builds a [Parameters] instance with the given [builder] function\n         * @param builder specifies a function to build a map\n         */\n        public inline fun build(builder: ParametersBuilder.() -> Unit): Parameters =\n            ParametersBuilder().apply(builder).build()\n    }\n}\n\n@Suppress(\"KDocMissingDocumentation\")\npublic interface ParametersBuilder : StringValuesBuilder {\n    override fun build(): Parameters\n}\n\n@Suppress(\"KDocMissingDocumentation\")\npublic fun ParametersBuilder(size: Int = 8): ParametersBuilder = ParametersBuilderImpl(size)\n\n@Suppress(\"KDocMissingDocumentation\")\npublic class ParametersBuilderImpl(\n    size: Int = 8\n) : StringValuesBuilderImpl(true, size), ParametersBuilder {\n    override fun build(): Parameters {\n        return ParametersImpl(values)\n    }\n}\n\n/**\n * Returns an empty parameters instance\n */\npublic fun parametersOf(): Parameters = Parameters.Empty\n\n/**\n * Creates a parameters instance containing only single pair\n */\npublic fun parametersOf(name: String, value: String): Parameters = ParametersSingleImpl(name, listOf(value))\n\n/**\n * Creates a parameters instance containing only single pair of [name] with multiple [values]\n */\npublic fun parametersOf(name: String, values: List<String>): Parameters = ParametersSingleImpl(name, values)\n\n/**\n * Creates a parameters instance from the entries of the given [map]\n */\npublic fun parametersOf(map: Map<String, List<String>>): Parameters = ParametersImpl(map)\n\n/**\n * Creates a parameters instance from the specified [pairs]\n */\npublic fun parametersOf(vararg pairs: Pair<String, List<String>>): Parameters = ParametersImpl(pairs.asList().toMap())\n\n@Suppress(\"KDocMissingDocumentation\")\npublic class ParametersImpl(\n    values: Map<String, List<String>> = emptyMap()\n) : Parameters, StringValuesImpl(true, values) {\n    override fun toString(): String = \"Parameters ${entries()}\"\n}\n\n@Suppress(\"KDocMissingDocumentation\")\npublic class ParametersSingleImpl(name: String, values: List<String>) : Parameters,\n    StringValuesSingleImpl(true, name, values) {\n    override fun toString(): String = \"Parameters ${entries()}\"\n}\n\n/**\n * Plus operator function that creates a new parameters instance from the original one concatenating with [other]\n */\npublic operator fun Parameters.plus(other: Parameters): Parameters = when {\n    caseInsensitiveName == other.caseInsensitiveName -> when {\n        this.isEmpty() -> other\n        other.isEmpty() -> this\n        else -> Parameters.build { appendAll(this@plus); appendAll(other) }\n    }\n    else -> {\n        throw IllegalArgumentException(\n            \"Cannot concatenate Parameters with case-sensitive and case-insensitive names\"\n        )\n    }\n}\n\ninternal object EmptyParameters : Parameters {\n    override val caseInsensitiveName: Boolean get() = true\n    override fun getAll(name: String): List<String>? = null\n    override fun names(): Set<String> = emptySet()\n    override fun entries(): Set<Map.Entry<String, List<String>>> = emptySet()\n    override fun isEmpty(): Boolean = true\n    override fun toString(): String = \"Parameters ${entries()}\"\n\n    override fun equals(other: Any?): Boolean = other is Parameters && other.isEmpty()\n}\n","/*\n* Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n*/\n\npackage io.ktor.client.request.forms\n\nimport io.ktor.client.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.http.content.*\n\n/**\n * Submit [formParameters] request.\n *\n * If [encodeInQuery] specified encode [formParameters] in url parameters and use [HttpMethod.Get] for the request.\n * Otherwise send [HttpMethod.Post] request with [formParameters] encoded in body.\n *\n * [formParameters] encoded using application/x-www-form-urlencoded format.\n */\npublic suspend inline fun HttpClient.submitForm(\n    formParameters: Parameters = Parameters.Empty,\n    encodeInQuery: Boolean = false,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = request {\n    if (encodeInQuery) {\n        method = HttpMethod.Get\n        url.parameters.appendAll(formParameters)\n    } else {\n        method = HttpMethod.Post\n        setBody(FormDataContent(formParameters))\n    }\n\n    block()\n}\n\n/**\n * Submit [formParameters] request.\n *\n * If [encodeInQuery] specified encode [formParameters] in url parameters and use [HttpMethod.Get] for the request.\n * Otherwise send [HttpMethod.Post] request with [formParameters] encoded in body.\n *\n * [url] destination\n * [formParameters] encoded using application/x-www-form-urlencoded format.\n */\npublic suspend fun HttpClient.submitForm(\n    url: String,\n    formParameters: Parameters = Parameters.Empty,\n    encodeInQuery: Boolean = false,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = submitForm(formParameters, encodeInQuery) {\n    url(url)\n    block()\n}\n\n/**\n * Send [HttpMethod.Post] request with [formData] encoded in body.\n * [formData] encoded using multipart/form-data format.\n * https://tools.ietf.org/html/rfc2045\n */\npublic suspend inline fun HttpClient.submitFormWithBinaryData(\n    formData: List<PartData>,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = request {\n    method = HttpMethod.Post\n    setBody(MultiPartFormDataContent(formData))\n    block()\n}\n\n/**\n * Send [HttpMethod.Post] request with [formData] encoded in body.\n * [url] destination\n * [formData] encoded using multipart/form-data format.\n *\n * https://tools.ietf.org/html/rfc2045\n */\npublic suspend inline fun HttpClient.submitFormWithBinaryData(\n    url: String,\n    formData: List<PartData>,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpResponse = submitFormWithBinaryData(formData) {\n    url(url)\n    block()\n}\n\n/**\n * Prepare [formParameters] request.\n *\n * If [encodeInQuery] specified encode [formParameters] in url parameters and use [HttpMethod.Get] for the request.\n * Otherwise send [HttpMethod.Post] request with [formParameters] encoded in body.\n *\n * [formParameters] encoded using application/x-www-form-urlencoded format.\n */\npublic suspend inline fun HttpClient.prepareForm(\n    formParameters: Parameters = Parameters.Empty,\n    encodeInQuery: Boolean = false,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareRequest {\n    if (encodeInQuery) {\n        method = HttpMethod.Get\n        url.parameters.appendAll(formParameters)\n    } else {\n        method = HttpMethod.Post\n        setBody(FormDataContent(formParameters))\n    }\n\n    block()\n}\n\n/**\n * Prepare [formParameters] request.\n *\n * If [encodeInQuery] specified encode [formParameters] in url parameters and use [HttpMethod.Get] for the request.\n * Otherwise send [HttpMethod.Post] request with [formParameters] encoded in body.\n *\n * [url] destination\n * [formParameters] encoded using application/x-www-form-urlencoded format.\n */\npublic suspend fun HttpClient.prepareForm(\n    url: String,\n    formParameters: Parameters = Parameters.Empty,\n    encodeInQuery: Boolean = false,\n    block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareForm(formParameters, encodeInQuery) {\n    url(url)\n    block()\n}\n\n/**\n * Prepare [HttpMethod.Post] request with [formData] encoded in body.\n * [formData] encoded using multipart/form-data format.\n * https://tools.ietf.org/html/rfc2045\n */\npublic suspend inline fun HttpClient.prepareFormWithBinaryData(\n    formData: List<PartData>,\n    crossinline block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareRequest {\n    method = HttpMethod.Post\n    setBody(MultiPartFormDataContent(formData))\n    block()\n}\n\n/**\n * Prepare [HttpMethod.Post] request with [formData] encoded in body.\n * [url] destination\n * [formData] encoded using multipart/form-data format.\n *\n * https://tools.ietf.org/html/rfc2045\n */\npublic suspend inline fun HttpClient.prepareFormWithBinaryData(\n    url: String,\n    formData: List<PartData>,\n    crossinline block: HttpRequestBuilder.() -> Unit = {}\n): HttpStatement = prepareFormWithBinaryData(formData) {\n    url(url)\n    block()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\nimport kotlin.js.arrayBufferIsView\n\n/**\n * Returns the array if it's not `null`, or an empty array otherwise.\n * @sample samples.collections.Arrays.Usage.arrayOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n/**\n * Returns a *typed* array containing all of the elements of this collection.\n *\n * Allocates an array of runtime type `T` having its size equal to the size of this collection\n * and populates the array with the elements of this collection.\n * @sample samples.collections.Collections.Collections.collectionToTypedArray\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * @sample samples.collections.Collections.Sorting.sortMutableList\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * @sample samples.collections.Collections.Sorting.sortMutableListWith\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (arrayBufferIsView(destination) && arrayBufferIsView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}\n\ninternal actual fun brittleContainsOptimizationEnabled(): Boolean = false","/*\n* Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n*/\n\npackage io.ktor.http\n\nimport io.ktor.util.*\n\n/**\n * Represents HTTP headers as a map from case-insensitive names to collection of [String] values\n */\npublic interface Headers : StringValues {\n    public companion object {\n        /**\n         * Empty [Headers] instance\n         */\n        @Suppress(\"DEPRECATION_ERROR\")\n        public val Empty: Headers = EmptyHeaders\n\n        /**\n         * Builds a [Headers] instance with the given [builder] function\n         * @param builder specifies a function to build a map\n         */\n        public inline fun build(builder: HeadersBuilder.() -> Unit): Headers = HeadersBuilder().apply(builder).build()\n    }\n}\n\n@Suppress(\"KDocMissingDocumentation\")\npublic class HeadersBuilder(size: Int = 8) : StringValuesBuilderImpl(true, size) {\n    override fun build(): Headers {\n        return HeadersImpl(values)\n    }\n\n    override fun validateName(name: String) {\n        super.validateName(name)\n        HttpHeaders.checkHeaderName(name)\n    }\n\n    override fun validateValue(value: String) {\n        super.validateValue(value)\n        HttpHeaders.checkHeaderValue(value)\n    }\n}\n\n@Suppress(\"KDocMissingDocumentation\")\n@Deprecated(\n    \"Empty headers is internal\",\n    replaceWith = ReplaceWith(\"Headers.Empty\"),\n    level = DeprecationLevel.ERROR\n)\npublic object EmptyHeaders : Headers {\n    override val caseInsensitiveName: Boolean get() = true\n    override fun getAll(name: String): List<String>? = null\n    override fun names(): Set<String> = emptySet()\n    override fun entries(): Set<Map.Entry<String, List<String>>> = emptySet()\n    override fun isEmpty(): Boolean = true\n    override fun toString(): String = \"Headers ${entries()}\"\n}\n\n/**\n * Returns empty headers\n */\npublic fun headersOf(): Headers = Headers.Empty\n\n/**\n * Returns [Headers] instance containing only one header with the specified [name] and [value]\n */\npublic fun headersOf(name: String, value: String): Headers = HeadersSingleImpl(name, listOf(value))\n\n/**\n * Returns [Headers] instance containing only one header with the specified [name] and [values]\n */\npublic fun headersOf(name: String, values: List<String>): Headers = HeadersSingleImpl(name, values)\n\n/**\n * Returns [Headers] instance from [pairs]\n */\npublic fun headersOf(vararg pairs: Pair<String, List<String>>): Headers = HeadersImpl(pairs.asList().toMap())\n\n@Suppress(\"KDocMissingDocumentation\")\npublic class HeadersImpl(\n    values: Map<String, List<String>> = emptyMap()\n) : Headers, StringValuesImpl(true, values) {\n    override fun toString(): String = \"Headers ${entries()}\"\n}\n\n@Suppress(\"KDocMissingDocumentation\")\npublic class HeadersSingleImpl(\n    name: String,\n    values: List<String>\n) : Headers, StringValuesSingleImpl(true, name, values) {\n    override fun toString(): String = \"Headers ${entries()}\"\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return any { it == element }\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return any { it == element }\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the array was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Double>.max(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Float>.max(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.max(): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.max(): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.max(): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.max(): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.max(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.max(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.max(): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Double>.min(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Float>.min(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.min(): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.min(): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.min(): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.min(): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.min(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.min(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.min(): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * The returned map is serializable (JVM).\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to entries of this map in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Any> Map<out K, V>.firstNotNullOf(transform: (Map.Entry<K, V>) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the map was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to entries of this map in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Any> Map<out K, V>.firstNotNullOfOrNull(transform: (Map.Entry<K, V>) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Maps.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapNotNull\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the map is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@kotlin.internal.InlineOnly\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V> {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxByOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOfWith(comparator, selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfWithOrNull(comparator, selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@kotlin.internal.InlineOnly\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V> {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the map is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@kotlin.internal.InlineOnly\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V> {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minByOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOfWith(comparator, selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfWithOrNull(comparator, selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@kotlin.internal.InlineOnly\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V> {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWithOrNull(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each entry, providing sequential index with the entry,\n * and returns the map itself afterwards.\n * @param [action] function that takes the index of an entry and the entry itself\n * and performs the action on the entry.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEachIndexed(action: (index: Int, Map.Entry<K, V>) -> Unit): M {\n    return apply { entries.forEachIndexed(action) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","/*\n* Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n*/\n\npackage io.ktor.client.call\n\nimport io.ktor.client.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.content.*\nimport io.ktor.util.*\nimport io.ktor.util.reflect.*\nimport io.ktor.utils.io.*\nimport io.ktor.utils.io.concurrent.*\nimport kotlinx.atomicfu.*\nimport kotlinx.coroutines.*\nimport kotlin.coroutines.*\nimport kotlin.reflect.*\n\n/**\n * A class that represents a single pair of [request] and [response] for a specific [HttpClient].\n *\n * @property client: client that executed the call.\n */\npublic open class HttpClientCall(\n    public val client: HttpClient\n) : CoroutineScope {\n    private val received: AtomicBoolean = atomic(false)\n\n    override val coroutineContext: CoroutineContext get() = response.coroutineContext\n\n    /**\n     * Typed [Attributes] associated to this call serving as a lightweight container.\n     */\n    public val attributes: Attributes get() = request.attributes\n\n    /**\n     * Represents the [request] sent by the client\n     */\n    public lateinit var request: HttpRequest\n        protected set\n\n    /**\n     * Represents the [response] sent by the server.\n     */\n    public lateinit var response: HttpResponse\n        protected set\n\n    @InternalAPI\n    public constructor(\n        client: HttpClient,\n        requestData: HttpRequestData,\n        responseData: HttpResponseData\n    ) : this(client) {\n        this.request = DefaultHttpRequest(this, requestData)\n        this.response = DefaultHttpResponse(this, responseData)\n\n        if (responseData.body !is ByteReadChannel) {\n            @Suppress(\"DEPRECATION_ERROR\")\n            attributes.put(CustomResponse, responseData.body)\n        }\n    }\n\n    protected open val allowDoubleReceive: Boolean = false\n\n    @OptIn(InternalAPI::class)\n    protected open suspend fun getResponseContent(): ByteReadChannel = response.content\n\n    /**\n     * Tries to receive the payload of the [response] as a specific expected type provided in [info].\n     * Returns [response] if [info] corresponds to [HttpResponse].\n     *\n     * @throws NoTransformationFoundException If no transformation is found for the type [info].\n     * @throws DoubleReceiveException If already called [body].\n     */\n    @OptIn(InternalAPI::class)\n    public suspend fun bodyNullable(info: TypeInfo): Any? {\n        try {\n            if (response.instanceOf(info.type)) return response\n            if (!allowDoubleReceive && !received.compareAndSet(false, true)) {\n                throw DoubleReceiveException(this)\n            }\n\n            @Suppress(\"DEPRECATION_ERROR\")\n            val responseData = attributes.getOrNull(CustomResponse) ?: getResponseContent()\n\n            val subject = HttpResponseContainer(info, responseData)\n            val result = client.responsePipeline.execute(this, subject).response.takeIf { it != NullBody }\n\n            if (result != null && !result.instanceOf(info.type)) {\n                val from = result::class\n                val to = info.type\n                throw NoTransformationFoundException(response, from, to)\n            }\n\n            return result\n        } catch (cause: Throwable) {\n            response.cancel(\"Receive failed\", cause)\n            throw cause\n        } finally {\n            response.complete()\n        }\n    }\n\n    /**\n     * Tries to receive the payload of the [response] as a specific expected type provided in [info].\n     * Returns [response] if [info] corresponds to [HttpResponse].\n     *\n     * @throws NoTransformationFoundException If no transformation is found for the type [info].\n     * @throws DoubleReceiveException If already called [body].\n     * @throws NullPointerException If content is `null`.\n     */\n    @OptIn(InternalAPI::class)\n    public suspend fun body(info: TypeInfo): Any = bodyNullable(info)!!\n\n    override fun toString(): String = \"HttpClientCall[${request.url}, ${response.status}]\"\n\n    internal fun setResponse(response: HttpResponse) {\n        this.response = response\n    }\n\n    internal fun setRequest(request: HttpRequest) {\n        this.request = request\n    }\n\n    public companion object {\n        /**\n         * [CustomResponse] key used to process the response of custom type in case of [HttpClientEngine] can't return body bytes directly.\n         * If present, attribute value will be an initial value for [HttpResponseContainer] in [HttpClient.responsePipeline].\n         *\n         * Example: [WebSocketSession]\n         */\n        @Deprecated(\n            \"This is going to be removed. Please file a ticket with clarification why and what for do you need it.\",\n            level = DeprecationLevel.ERROR\n        )\n        public val CustomResponse: AttributeKey<Any> = AttributeKey(\"CustomResponse\")\n    }\n}\n\n/**\n * Tries to receive the payload of the [response] as a specific type [T].\n *\n * @throws NoTransformationFoundException If no transformation is found for the type [T].\n * @throws DoubleReceiveException If already called [body].\n */\npublic suspend inline fun <reified T> HttpClientCall.body(): T = bodyNullable(typeInfo<T>()) as T\n\n/**\n * Tries to receive the payload of the [response] as a specific type [T].\n *\n * @throws NoTransformationFoundException If no transformation is found for the type [T].\n * @throws DoubleReceiveException If already called [body].\n */\npublic suspend inline fun <reified T> HttpResponse.body(): T = call.bodyNullable(typeInfo<T>()) as T\n\n/**\n * Tries to receive the payload of the [response] as a specific type [T] described in [typeInfo].\n *\n * @throws NoTransformationFoundException If no transformation is found for the type info [typeInfo].\n * @throws DoubleReceiveException If already called [body].\n */\n@Suppress(\"UNCHECKED_CAST\")\npublic suspend fun <T> HttpResponse.body(typeInfo: TypeInfo): T = call.bodyNullable(typeInfo) as T\n\n/**\n * Exception representing that the response payload has already been received.\n */\n@Suppress(\"KDocMissingDocumentation\")\npublic class DoubleReceiveException(call: HttpClientCall) : IllegalStateException() {\n    override val message: String = \"Response already received: $call\"\n}\n\n/**\n * Exception representing fail of the response pipeline\n * [cause] contains origin pipeline exception\n */\n@Suppress(\"KDocMissingDocumentation\", \"unused\")\npublic class ReceivePipelineException(\n    public val request: HttpClientCall,\n    public val info: TypeInfo,\n    override val cause: Throwable\n) : IllegalStateException(\"Fail to run receive pipeline: $cause\")\n\n/**\n * Exception representing the no transformation was found.\n * It includes the received type and the expected type as part of the message.\n */\n@Suppress(\"KDocMissingDocumentation\")\npublic class NoTransformationFoundException(\n    response: HttpResponse,\n    from: KClass<*>,\n    to: KClass<*>\n) : UnsupportedOperationException() {\n    override val message: String? = \"\"\"No transformation found: $from -> $to\n        |with response from ${response.request.url}:\n        |status: ${response.status}\n        |response headers: \n        |${response.headers.flattenEntries().joinToString { (key, value) -> \"$key: $value\\n\" }}\n    \"\"\".trimMargin()\n}\n",null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\n@kotlin.js.JsPolyfill(\"\"\"\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\n\"\"\")\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\n@kotlin.js.JsPolyfill(\"\"\"\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n\"\"\")\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@Deprecated(\"Use String.plus() instead\", ReplaceWith(\"this + str\"))\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@Deprecated(\"Use Regex.findAll() instead or invoke matches() on String dynamically: this.asDynamic().match(regex)\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n/**\n * Compares two strings lexicographically, optionally ignoring case differences.\n *\n * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        for (index in 0 until min) {\n            var thisChar = this[index]\n            var otherChar = other[index]\n\n            if (thisChar != otherChar) {\n                thisChar = thisChar.uppercaseChar()\n                otherChar = otherChar.uppercaseChar()\n\n                if (thisChar != otherChar) {\n                    thisChar = thisChar.lowercaseChar()\n                    otherChar = otherChar.lowercaseChar()\n\n                    if (thisChar != otherChar) {\n                        return thisChar.compareTo(otherChar)\n                    }\n                }\n            }\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean = contentEqualsImpl(other)\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {\n    return if (ignoreCase)\n        this.contentEqualsIgnoreCaseImpl(other)\n    else\n        this.contentEqualsImpl(other)\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.dom.*\nimport org.w3c.dom.events.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) : MediaProvider, ImageBitmapSource {\n    open val size: Number\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close()\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@Suppress(\"INVISIBLE_REFERENCE\", \"INVISIBLE_MEMBER\")\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@Suppress(\"INVISIBLE_REFERENCE\", \"INVISIBLE_MEMBER\")\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override fun item(index: Int): File?\n}\n\n@Suppress(\"INVISIBLE_REFERENCE\", \"INVISIBLE_MEMBER\")\n@kotlin.internal.InlineOnly\npublic inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob)\n    fun readAsBinaryString(blob: Blob)\n    fun readAsText(blob: Blob, label: String = definedExternally)\n    fun readAsDataURL(blob: Blob)\n    fun abort()\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.convertToSetForSetOperation()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.convertToSetForSetOperation())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.convertToSetForSetOperation())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.convertToSetForSetOperation()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n",null,null,null],"names":[],"mappings":"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A,+B;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EAzBJ,4B;IAAA,6vB;G;;EAAA,iC;IAAA,a;WAAA,Q;QAAA,qC;WAAA,U;QAAA,uC;WAAA,O;QAAA,oC;WAAA,M;QAAA,mC;WAAA,U;QAAA,uC;WAAA,e;QAAA,4C;WAAA,O;QAAA,oC;WAAA,M;QAAA,mC;WAAA,Q;QAAA,qC;WAAA,O;QAAA,oC;WAAA,O;QAAA,oC;WAAA,Q;QAAA,qC;WAAA,U;QAAA,uC;WAAA,O;QAAA,oC;WAAA,O;QAAA,oC;WAAA,O;QAAA,oC;WAAA,Q;QAAA,qC;WAAA,Q;QAAA,qC;WAAA,M;QAAA,mC;WAAA,K;QAAA,kC;WAAA,M;QAAA,mC;WAAA,K;QAAA,kC;WAAA,M;QAAA,mC;WAAA,Q;QAAA,qC;;QAAA,iE;;G;;ECEA,oC;;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IASI,8E;IAEA,sG;IACA,sG;IACA,8G;IAEA,4F;IACA,4F;IACA,oG;IAEA,sG;IACA,kH;IAGA,gH;IACA,6H;IAIA,iG;IACA,iG;IACA,yG;IAEA,qG;IACA,6G;IAEA,iI;IACA,qG;IACA,mG;IACA,iG;IAEA,iH;IACA,+G;IAEA,+F;IACA,6F;IAEA,yF;IACA,uH;IAEA,uG;IACA,mG;IACA,2G;IAEA,qI;IACA,yI;IACA,6I;IACA,2F;IAEA,mH;IACA,qF;IAEA,mF;IACA,yF;IAEA,mG;IACA,mG;IAEA,iH;IACA,iH;IAEA,2G;IACA,2G;IACA,2G;IACA,uH;IACA,2G;IAEA,mH;IAEA,qF;IAEA,iI;IAEA,6F;IAEA,iH;IACA,qG;IAEA,6F;IACA,uG;IACA,6F;IAEA,yG;IAEA,uK;IACA,uG;IAEA,+H;IAEA,mH;IAEA,mJ;IAEA,uG;IAEA,2H;IACA,2H;IAEA,+J;IACA,iH;IACA,uG;IACA,2G;IACA,2H;IACA,uI;IACA,iH;IACA,6H;IACA,+G;IACA,mG;IACA,mJ;IAEA,iG;IACA,+F;IAEA,qH;IAEA,uG;IACA,qG;IACA,mF;IACA,qH;IACA,mF;IACA,6G;IAEA,iH;IAnIJ,mC;G;;EASI,oD;IAAA,wB;IAAA,4C;G;;EAEA,gE;IAAA,wB;IAAA,wD;G;;EACA,gE;IAAA,wB;IAAA,wD;G;;EACA,oE;IAAA,wB;IAAA,4D;G;;EAEA,2D;IAAA,wB;IAAA,mD;G;;EACA,2D;IAAA,wB;IAAA,mD;G;;EACA,+D;IAAA,wB;IAAA,uD;G;;EAEA,gE;IAAA,wB;IAAA,wD;G;;EACA,sE;IAAA,wB;IAAA,8D;G;;EAGA,qE;IAAA,wB;IAAA,6D;G;;EACA,2E;IAAA,wB;IAAA,mE;G;;EAIA,6D;IAAA,wB;IAAA,qD;G;;EACA,6D;IAAA,wB;IAAA,qD;G;;EACA,iE;IAAA,wB;IAAA,yD;G;;EAEA,+D;IAAA,wB;IAAA,uD;G;;EACA,mE;IAAA,wB;IAAA,2D;G;;EAEA,6E;IAAA,wB;IAAA,qE;G;;EACA,+D;IAAA,wB;IAAA,uD;G;;EACA,8D;IAAA,wB;IAAA,sD;G;;EACA,6D;IAAA,wB;IAAA,qD;G;;EAEA,qE;IAAA,wB;IAAA,6D;G;;EACA,oE;IAAA,wB;IAAA,4D;G;;EAEA,4D;IAAA,wB;IAAA,oD;G;;EACA,2D;IAAA,wB;IAAA,mD;G;;EAEA,yD;IAAA,wB;IAAA,iD;G;;EACA,wE;IAAA,wB;IAAA,gE;G;;EAEA,gE;IAAA,wB;IAAA,wD;G;;EACA,8D;IAAA,wB;IAAA,sD;G;;EACA,kE;IAAA,wB;IAAA,0D;G;;EAEA,+E;IAAA,wB;IAAA,uE;G;;EACA,iF;IAAA,wB;IAAA,yE;G;;EACA,mF;IAAA,wB;IAAA,2E;G;;EACA,0D;IAAA,wB;IAAA,kD;G;;EAEA,sE;IAAA,wB;IAAA,8D;G;;EACA,uD;IAAA,wB;IAAA,+C;G;;EAEA,sD;IAAA,wB;IAAA,8C;G;;EACA,yD;IAAA,wB;IAAA,iD;G;;EAEA,8D;IAAA,wB;IAAA,sD;G;;EACA,8D;IAAA,wB;IAAA,sD;G;;EAEA,qE;IAAA,wB;IAAA,6D;G;;EACA,qE;IAAA,wB;IAAA,6D;G;;EAEA,kE;IAAA,wB;IAAA,0D;G;;EACA,kE;IAAA,wB;IAAA,0D;G;;EACA,kE;IAAA,wB;IAAA,0D;G;;EACA,wE;IAAA,wB;IAAA,gE;G;;EACA,kE;IAAA,wB;IAAA,0D;G;;EAEA,sE;IAAA,wB;IAAA,8D;G;;EAEA,uD;IAAA,wB;IAAA,+C;G;;EAEA,6E;IAAA,wB;IAAA,qE;G;;EAEA,2D;IAAA,wB;IAAA,mD;G;;EAEA,qE;IAAA,wB;IAAA,6D;G;;EACA,+D;IAAA,wB;IAAA,uD;G;;EAEA,2D;IAAA,wB;IAAA,mD;G;;EACA,gE;IAAA,wB;IAAA,wD;G;;EACA,2D;IAAA,wB;IAAA,mD;G;;EAEA,iE;IAAA,wB;IAAA,yD;G;;EAEA,gG;IAAA,wB;IAAA,wF;G;;EACA,gE;IAAA,wB;IAAA,wD;G;;EAEA,4E;IAAA,wB;IAAA,oE;G;;EAEA,sE;IAAA,wB;IAAA,8D;G;;EAEA,sF;IAAA,wB;IAAA,8E;G;;EAEA,gE;IAAA,wB;IAAA,wD;G;;EAEA,0E;IAAA,wB;IAAA,kE;G;;EACA,0E;IAAA,wB;IAAA,kE;G;;EAEA,4F;IAAA,wB;IAAA,oF;G;;EACA,qE;IAAA,wB;IAAA,6D;G;;EACA,gE;IAAA,wB;IAAA,wD;G;;EACA,kE;IAAA,wB;IAAA,0D;G;;EACA,0E;IAAA,wB;IAAA,kE;G;;EACA,gF;IAAA,wB;IAAA,wE;G;;EACA,qE;IAAA,wB;IAAA,6D;G;;EACA,2E;IAAA,wB;IAAA,mE;G;;EACA,oE;IAAA,wB;IAAA,4D;G;;EACA,8D;IAAA,wB;IAAA,sD;G;;EACA,sF;IAAA,wB;IAAA,8E;G;;EAEA,6D;IAAA,wB;IAAA,qD;G;;EACA,4D;I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,I;IAEf,UACe,I;IAEf,UACe,I;IAEf,UACe,I;IAEf,cACmB,Q;IAEnB,eACoB,S;IAEpB,mBACwB,a;IAExB,cACmB,Q;IAEnB,cACmB,Q;IAEnB,eACoB,S;IAEpB,mBACwB,a;IAExB,cACmB,Q;IAEnB,mBACwB,a;IAExB,gBACqB,U;IAErB,eACoB,S;IAEpB,eACoB,S;IAEpB,cACmB,Q;IAEnB,eACoB,S;IAEpB,mBACwB,a;IAExB,cACmB,Q;G;;;EApGvB,8B;IAAA,6B;MAAA,Y;;IAAA,sB;G;EAuGA,2F;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,4C;IAAA,0B;G;;;;iDAAA,Y;;;;;YzB9EiC,kBAArB,6B;YckDR,WWoCA,UAAS,oBAAW,M;YACpB,WAAQ,8C;Y5BvGJ,IADE,IACF,S;ciBkEJ,WjBjEQ,QAAY,gB;cCJiD,yB;;cAAkB,qB;;;kBC0BpC,sE;;kBAGrD,oC;oBAHqD,oBAInD,I;oBAJmD,sB;;oBAAA,W;;;;ce2CnD,WjBhEQ,YCLgD,6C;mBDOpD,kBALE,IAKF,mB;ciB8DJ,WjB7DQ,QAAY,I;ciB6DpB,WjB5DQ,YAAW,I;;ciB4DnB,WjBzDQ,QAAY,I;cCZiD,2B;;cAAkB,uB;;;kBC0BpC,wE;;kBAGrD,sC;oBAHqD,sBAInD,I;oBAJmD,sB;;oBAAA,a;;;;ce2CnD,WjBxDQ,YCbgD,mD;;;Y2B2GxD,iBXtCA,WWsCA,C;YzBrG2C,gB;4BAAA,CAA7B,uBcgEP,WdhEO,uBAA6B,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAa3C,a;YyBqFA,oB;;;;;;;;;;;;;;;G;EAPJ,4F;mBAAA,qF;QAAA,S;aAAA,Q;;aAAA,uB;G;EC5GA,qB;IAGI,iC;G;EAAA,+B;IAAA,mC;IAEI,YzBOoC,WyBDzB,uBzBCyB,C;IyBCpC,WzBDoC,WyBY1B,kEzBZ0B,C;IyBcpC,WzBdoC,WyBqB1B,uDzBrB0B,C;IyBuBpC,YzBvBoC,WyByCzB,uEzBzCyB,C;IyB2CpC,mBzB3CoC,WyB8ClB,6HzB9CkB,C;IyBgDpC,czBhDoC,WyB6DvB,kEzB7DuB,C;IyB+DpC,sBzB/DoC,WyBqEf,gBzBrEe,C;IyBuEpC,sBzBvEoC,WyB6Ef,sBzB7Ee,C;G;;;EyBTxC,2C;IAAA,0C;MAAA,yB;;IAAA,mC;G;;;;;;;;ECHJ,+B;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6B;IAAA,gC;K;IAQI,oD;IACA,0D;IACA,8E;IACA,4C;G;;EAHA,uC;IAAA,mB;IAAA,+B;G;;EACA,0C;IAAA,mB;IAAA,kC;G;;EACA,oD;IAAA,mB;IAAA,4C;G;;EACA,mC;IAAA,mB;IAAA,2B;G;;EAXJ,yB;IAAA,+I;G;;EAAA,8B;IAAA,a;WAAA,U;QAAA,oC;WAAA,a;QAAA,uC;WAAA,uB;QAAA,iD;WAAA,M;QAAA,gC;;QAAA,iE;;G;;ECamC,2E;IAa/B,qD;IAZA,kC;IACA,kC;IACA,0B;IACA,wB;IACA,c;IAKA,wD;G;mFATA,Y;IAAA,8B;G,OAAA,oB;IAAA,kC;G;mFACA,Y;IAAA,8B;G,OAAA,oB;IAAA,kC;G;+EACA,Y;IAAA,0B;G,OAAA,gB;IAAA,0B;G;8EACA,Y;IAAA,yB;G,OAAA,e;IAAA,wB;G;qGAMA,Y;IAAA,4B;G;EAGA,mD;IAAA,uD;G;sEACI,sB;IAMmB,UACyB,MADzB,EAEL,M;IAFK,0CAAW,oBAAO,SAAlB,E;IACyB,eAA7B,mCAAW,oBAAO,QAAlB,EAA6B,C;IAC9B,4CAAW,oBAAO,OAAlB,E;IAHV,OAAO,wCAIQ,mCAAW,oBAAO,YAAlB,EAJR,kBAK+B,gBAA5B,mCAAW,oBAAO,OAAlB,EAA4B,CAL/B,C;G;oEASX,sB;IAIU,0B;MAAA,aAA6C,I;IAAQ,gBAC3D,QACI,sBACI,oBAAO,OADX,EAEkB,QAAd,oBAAO,OAAO,EAAQ,GAAR,EAAa,GAAb,CAFlB,wCAKmB,0CALnB,EAIgB,eAJhB,CADJ,EAQI,sBACI,oBAAO,YADX,EAEuB,QAAnB,oBAAO,YAAY,EAAQ,GAAR,EAAa,GAAb,CAFvB,4CAKmB,+CALnB,EAIgB,eAJhB,CARJ,EAeI,sBACI,oBAAO,QADX,EAEmB,QAAf,oBAAO,QAAQ,EAAQ,GAAR,EAAa,GAAb,CAFnB,0CAKoC,SAAjB,2CAAiB,CALpC,EAIgB,eAJhB,CAfJ,EAsBI,sBACI,oBAAO,OADX,EAEI,oBAAO,OAFX,4CAKmC,SAAhB,0CAAgB,CALnC,EAIgB,eAJhB,CAtBJ,EAD2D,C;G;iEAnBnE,Y;;G;;;EAAA,+D;IAAA,8D;MAAA,6C;;IAAA,uD;G;4DAqDA,Y;IAKI,OAA4B,wDAA3B,IAE8B,4D;G;2DAEnC,6B;IAE+B,wDAAO,iBAAP,C;IACI,4DAAO,iBAAP,C;G;mEAGnC,Y;IAE+B,+D;IACI,mE;G;mDAGnC,iB;cAII,M;IAHA,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,IAAI,iBAAiB,qGAAe,KAAf,UAArB,C;MAAkD,OAAO,K;IAEzD,kF;IAEA,IAAI,uBAAY,KAAM,SAAlB,CAAJ,C;MAAgC,OAAO,K;IACvC,IAAI,uBAAY,KAAM,SAAlB,CAAJ,C;MAAgC,OAAO,K;IACvC,IAAI,cAAQ,KAAM,KAAlB,C;MAAwB,OAAO,K;IAC/B,IAAI,kBAAO,KAAM,IAAb,CAAJ,C;MAAsB,OAAO,K;IAC7B,IAAI,aAAO,KAAM,IAAjB,C;MAAsB,OAAO,K;IAC7B,IAAI,gBAAU,KAAM,OAApB,C;MAA4B,OAAO,K;IAEnC,OAAO,I;G;qDAGX,Y;IACI,aAAsB,SAAT,aAAS,C;IACtB,SAAS,MAAK,MAAL,QAAuB,SAAT,aAAS,CAAvB,I;IACT,SAAS,MAAK,MAAL,QAAc,SAAd,I;IACT,SAAS,MAAK,MAAL,QAAkB,SAAJ,QAAI,CAAlB,I;IACT,SAAS,MAAK,MAAL,QAAkB,SAAJ,QAAI,CAAlB,I;IACT,SAAS,MAAK,MAAL,QAAc,WAAO,WAArB,I;IACT,OAAO,M;G;EAnHf,qD;;;;;;;;;G;qHAAA,Y;IAAA,gC;G;0EAAA,0B;;;;;;;;;;G;4EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;yEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECNA,6C;;;;G;;;EASA,iD;;;;;G;;;ECTA,+C;;;;G;;;EASA,mD;;;;;;G;;;EAOA,wC;;;;G;;;EAKA,8C;;;;;;G;;;EAOA,4C;;;;G;;;EAIA,6C;;;;G;;;EChCA,6C;;;;G;;;EASA,iD;;;;;;G;;;EAOA,sC;;;;G;;;EAKA,4C;;;;;G;;;EAMA,qC;;;;;;;G;;;EC3BA,+C;;;;G;;;EASA,+C;;;;;G;;;EAMA,uC;;;;;G;;ECNgC,+C;IAS5B,kD;IARA,0B;IACA,wB;IAIA,qD;G;4EALA,Y;IAAA,0B;G,OAAA,gB;IAAA,0B;G;2EACA,Y;IAAA,yB;G,OAAA,e;IAAA,wB;G;kGAIA,Y;IAAA,4B;G;EAGA,gD;IAAA,oD;G;mEACI,sB;IAMc,Q;IAAA,0CAAW,oBAAO,OAAlB,E;IADV,OAAO,+BAEiC,MAA7B,mCAAW,oBAAO,QAAlB,EAA6B,CAFjC,O;G;iEAMX,sB;IAIU,0B;MAAA,aAA0C,I;IAAQ,gBACxD,QACI,sBACI,oBAAO,OADX,EAEkB,QAAd,oBAAO,OAAO,EAAQ,GAAR,EAAa,GAAb,CAFlB,wCAKmB,0CALnB,EAIgB,eAJhB,CADJ,EAQI,sBACI,oBAAO,QADX,EAEmB,QAAf,oBAAO,QAAQ,EAAQ,GAAR,EAAa,GAAb,CAFnB,0CAKoC,SAAjB,2CAAiB,CALpC,EAIgB,eAJhB,CARJ,EADwD,C;G;8DAhBhE,Y;;G;;;EAAA,4D;IAAA,2D;MAAA,0C;;IAAA,oD;G;gDAoCA,iB;cAII,M;IAHA,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,IAAI,iBAAiB,qGAAe,KAAf,UAArB,C;MAAkD,OAAO,K;IAEzD,+E;IAEA,IAAI,cAAQ,KAAM,KAAlB,C;MAAwB,OAAO,K;IAC/B,IAAI,kBAAO,KAAM,IAAb,CAAJ,C;MAAsB,OAAO,K;IAC7B,IAAI,gBAAU,KAAM,OAApB,C;MAA4B,OAAO,K;IAEnC,OAAO,I;G;kDAGX,Y;IACI,aAAa,S;IACb,SAAS,MAAK,MAAL,QAAkB,SAAJ,QAAI,CAAlB,I;IACT,SAAS,MAAK,MAAL,QAAc,WAAO,WAArB,I;IACT,OAAO,M;G;EAnEf,kD;;;;;;G;kHAAA,Y;IAAA,gC;G;uEAAA,0B;;;;;;;G;yEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;sEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;ECJA,mC;;;;;;G;;;ECCA,uC;;;;;;;G;;;ECDA,+B;;;;;;G;;;ECCA,qC;;;;;G;;ECQ4C,2D;IASxC,8D;IARA,0B;IACA,wB;IAIA,kE;G;wFALA,Y;IAAA,0B;G,OAAA,gB;IAAA,0B;G;uFACA,Y;IAAA,yB;G,OAAA,e;IAAA,wB;G;8GAIA,Y;IAAA,4B;G;EAGA,4D;IAAA,gE;G;+EACI,sB;IAMc,Q;IAAA,0CAAW,oBAAO,OAAlB,E;IADV,OAAO,2CAEiC,MAA7B,mCAAW,oBAAO,QAAlB,EAA6B,CAFjC,O;G;6EAMX,sB;IAIU,0B;MAAA,aAAsD,I;IAAQ,gBACpE,QACI,sBACI,oBAAO,OADX,EAEkB,QAAd,oBAAO,OAAO,EAAQ,GAAR,EAAa,GAAb,CAFlB,wCAKmB,0CALnB,EAIgB,eAJhB,CADJ,EAQI,sBACI,oBAAO,QADX,EAEmB,QAAf,oBAAO,QAAQ,EAAQ,GAAR,EAAa,GAAb,CAFnB,0CAKoC,SAAjB,2CAAiB,CALpC,EAIgB,eAJhB,CARJ,EADoE,C;G;0EAhB5E,Y;;G;;;EAAA,wE;IAAA,uE;MAAA,sD;;IAAA,gE;G;4DAoCA,iB;cAII,M;IAHA,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,IAAI,iBAAiB,qGAAe,KAAf,UAArB,C;MAAkD,OAAO,K;IAEzD,2F;IAEA,IAAI,cAAQ,KAAM,KAAlB,C;MAAwB,OAAO,K;IAC/B,IAAI,kBAAO,KAAM,IAAb,CAAJ,C;MAAsB,OAAO,K;IAC7B,IAAI,gBAAU,KAAM,OAApB,C;MAA4B,OAAO,K;IAEnC,OAAO,I;G;8DAGX,Y;IACI,aAAa,S;IACb,SAAS,MAAK,MAAL,QAAkB,SAAJ,QAAI,CAAlB,I;IACT,SAAS,MAAK,MAAL,QAAc,WAAO,WAArB,I;IACT,OAAO,M;G;EAnEf,8D;;;;;;G;8HAAA,Y;IAAA,gC;G;mFAAA,0B;;;;;;;G;qFAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;kFAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;ECmB0C,yB;IAAC,W;G;;EAE3C,0B;;G;EA6BwB,oE;IAAA,mB;MAAE,qBAAY,wBAAK,KAAjB,iC;K;G;EAQF,mD;IAAE,sD;G;EAQF,mD;IAAE,mD;G;EAGF,sE;IAAA,mB;MACR,yDACI,gBAAa,iCAAb,yBADJ,C;K;G;6CA1BZ,Y;IAwBe,UAOP,MAPO,EAOP,MAPO,EAUP,MAVO,EAUP,M;IA7BJ,IAAI,CAAC,iCAAU,KAAK,iBAAQ,SAAK,KAAb,CAApB,C;MACI,MAAO,cAAK,2CAAL,C;MADX,OAEI,K;WACG,IACH,SAAK,YAAL,IAAoB,IAApB,KACI,CAAC,iCAAU,OAAO,iBAAQ,cAAA,SAAK,YAAL,CAAmB,OAA3B,CAAlB,IACA,CAAC,iCAAU,OAAO,iBAAQ,cAAA,SAAK,YAAL,CAAmB,QAA3B,CAFtB,CADG,C;MAMH,MAAO,cAAK,uCAAL,C;MATX,OAUI,K;WACG,IACH,SAAK,YAAL,IAAoB,IAApB,KACI,CAAC,iCAAU,OAAO,iBAAQ,cAAA,SAAK,YAAL,CAAmB,OAA3B,CAAlB,IACA,CAAC,iCAAU,OAAO,iBAAQ,cAAA,SAAK,YAAL,CAAmB,QAA3B,CAFtB,CADG,C;MAMH,MAAO,cAAK,uCAAL,C;MAjBX,OAkBI,K;;MACO,yB;MAAJ,IAAI,EAAkB,CAAlB,oBAAqB,CAArB,CAAJ,C;QACH,MAAO,cAAK,6CAAL,C;QApBX,OAwBI,K;;QAxBJ,OA0BI,6GAA0C,IAA1C,KACA,wBAAoB,kBADpB,IAEA,wBAAoB,kBAFpB,KAGA,4GAA0C,IAH1C,C;;;G;EAea,uD;IAAA,mB;MAAE,sB;K;G;4CATvB,6B;IAG0B,UAGA,M;IAJtB,IAAI,gDAAJ,C;MACI,KAAkB,OAAlB,iBAAkB,oBAAlB,U;QAA6C,U;SAAA,iC;;MAC7C,wBAAoB,gBAAO,iBAAkB,oBAAzB,C;MACpB,wBAAoB,gBAAO,iBAAkB,oBAAzB,C;MACpB,KAAkB,SAAlB,iBAAkB,oBAAlB,U;QAA6C,U;SAAA,iC;;;MAE7C,cAAc,4DAA2B,IAA3B,iB;MACd,MAAO,eAAM,qCAAN,C;MACP,MAAM,2BAAsB,OAAtB,C;;G;oDAId,Y;IAES,UACA,MADA,EAEL,MAFK,EAKL,M;IALA,CAAK,OAAL,SAAK,YAAL,4BAA4B,KAA5B,Q;IACA,CAAK,SAAL,SAAK,YAAL,8BAA4B,KAA5B,Q;IACA,4F;IACA,wBAAoB,yB;IACpB,wBAAoB,yB;IACpB,4F;G;oCAGJ,iB;IAIQ,Q;IAHJ,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,IAAI,qCAAJ,C;MAA8B,OAAO,K;IAErC,IAAI,2CAAQ,KAAM,KAAd,SAAJ,C;MAAwB,OAAO,K;IAC/B,IAAI,kBAAY,KAAM,SAAtB,C;MAAgC,OAAO,K;IACvC,IAAI,oBAAc,KAAM,WAAxB,C;MAAoC,OAAO,K;IAC3C,IAAI,uBAAiB,KAAM,cAA3B,C;MAA0C,OAAO,K;IACjD,IAAI,kCAAuB,KAAM,oBAA7B,CAAJ,C;MAAsD,OAAO,K;IAC7D,IAAI,kCAAuB,KAAM,oBAA7B,CAAJ,C;MAAsD,OAAO,K;IAC7D,IAAI,kCAAuB,KAAM,oBAA7B,CAAJ,C;MAAsD,OAAO,K;IAC7D,IAAI,kCAAuB,KAAM,oBAA7B,CAAJ,C;MAAsD,OAAO,K;IAE7D,OAAO,I;G;sCAGX,Y;IAK4B,kBAGA,MAHA,EAGA,M;IAPxB,aAAa,SAAK,W;IAClB,SAAS,MAAK,MAAL,QAAc,aAAS,WAAvB,I;IACT,SAAS,MAAK,MAAL,QAAc,eAAW,WAAzB,I;IACT,SAAS,MAAK,MAAL,QAAc,kBAAd,I;IACT,SAAS,MAAK,MAAL,SAAe,gGAAmC,CAAlD,K;IACT,SAAS,MAAK,MAAL,QAAkC,SAApB,wBAAoB,CAAlC,I;IACT,SAAS,MAAK,MAAL,QAAkC,SAApB,wBAAoB,CAAlC,I;IACT,SAAS,MAAK,MAAL,SAAe,oGAAmC,CAAlD,K;IACT,OAAO,M;G;EA7Gf,oC;;G;kDAAA,Y;;G;;;;;;;;;;;;;;EAiHkB,kC;IACd,2BAAiB,I;IlCjHjB,cAAc,mC;IA0Nd,gBAAc,kEAHuB,IAGvB,C;IkCrGN,6D;InCpEoD,Q;IC0K5D,SmCtIA,kBAAS,KAAT,EpCpC4D,qBDxDrD,qFCwDqD,kCoCoC5D,C;IDiCQ,mD;InCrEoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,yECwDqD,oCoCoC5D,C;IDkCQ,sD;InCtEoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,4ECwDqD,oCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,kEAHuB,IAGvB,C;IkC7FN,oD;InC5EoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,0ECwDqD,oCoCoC5D,C;IDyCQ,gD;InC7EoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,sECwDqD,oCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,0EAHuB,IAGvB,C;IkCxFN,oD;InCjFoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,0ECwDqD,oCoCoC5D,C;ID8CQ,gD;InClFoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,sECwDqD,oCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,kEAHuB,IAGvB,C;IkCjFN,qD;InCxFoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,2ECwDqD,oCoCoC5D,C;IDqDQ,qD;InCzFoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,2ECwDqD,oCoCoC5D,C;IDsDQ,iD;InC1FoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,uECwDqD,oCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,0EAHuB,IAGvB,C;IkC3EN,qD;InC9FoD,U;IC0K5D,SmCtIA,kBAAS,OAAT,EpCpC4D,uBDxDrD,2ECwDqD,oCoCoC5D,C;ID2DQ,sD;InC/FoD,W;IC0K5D,SmCtIA,kBAAS,QAAT,EpCpC4D,wBDxDrD,2ECwDqD,qCoCoC5D,C;ID4DQ,kD;InChGoD,W;IC0K5D,SmCtIA,kBAAS,QAAT,EpCpC4D,wBDxDrD,uECwDqD,qCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,kEAHuB,IAGvB,C;IkCpEN,yD;InCrGoD,W;IC0K5D,SmCtIA,kBAAS,QAAT,EpCpC4D,wBDxDrD,8ECwDqD,qCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,0EAHuB,IAGvB,C;IkChEN,yD;InCzGoD,W;IC0K5D,SmCtIA,kBAAS,QAAT,EpCpC4D,wBDxDrD,8ECwDqD,qCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IAFR,gBAAc,6DAHuB,IAGvB,C;IkC3DN,4C;InC9GoD,W;IC0K5D,SmCtIA,kBAAS,QAAT,EpCpC4D,wBDxDrD,iECwDqD,qCoCoC5D,C;InCuIA,SAAQ,iBA3NR,OA2NQ,C;IkC1GR,8BlChHO,OAAQ,Q;IkCgKnB,W;G;;;EEpLA,0C;;;;;;;;;;;;;;G;;ECI6B,2J;;IAIzB,6B;MAAA,gBAAkC,C;IAKlC,yB;IARA,0B;IACA,kC;IACA,sC;IACA,4C;IACA,wD;IACA,uD;IACA,wD;IACA,wD;G;oEAPA,Y;IAAA,0B;G,OAAA,gB;IAAA,0B;G;wEACA,Y;IAAA,8B;G;0EACA,Y;IAAA,gC;G;6EACA,Y;IAAA,mC;G;mFACA,Y;IAAA,yC;G;mFACA,Y;IAAA,wC;G;mFACA,Y;IAAA,yC;G;mFACA,Y;IAAA,yC;G;EAbJ,wC;;G;sDAAA,Y;;G;;;;;;;;;EAAA,0C;;;;;;;;;;;G;0GAAA,Y;IAAA,gC;G;+DAAA,0B;;;;;qCASsC,C;;;;;;;G;iEATtC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;8DAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;sCASsC,C;;;;;;;;;;;;;;;;;;;;;;EClBtC,iC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IASI,gE;IACA,0D;IACA,gE;IACA,0D;G;;EAHA,6C;IAAA,qB;IAAA,qC;G;;EACA,0C;IAAA,qB;IAAA,kC;G;;EACA,6C;IAAA,qB;IAAA,qC;G;;EACA,0C;IAAA,qB;IAAA,kC;G;sCAEA,Y;IAC+B,QAAM,IAAN,M;WAC3B,c;QAD2B,OACX,uB;WAChB,W;QAF2B,OAEd,e;WACb,c;QAH2B,OAGX,uB;WAChB,W;QAJ2B,OAId,e;;QAJc,mC;;G;;EAfnC,2B;IAAA,qJ;G;;EAAA,gC;IAAA,a;WAAA,c;QAAA,0C;WAAA,W;QAAA,uC;WAAA,c;QAAA,0C;WAAA,W;QAAA,uC;;QAAA,qE;;G;;;;;;ECQsB,4C;;IAClB,sB;IACA,kB;IACA,kB;G;EATJ,iC;;G;+CAAA,Y;;G;;;;;;;;;EAAA,mC;;;;;;G;mGAAA,Y;IAAA,gC;G;wDAAA,0B;;;;;;G;0DAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;uDAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;qCAAA,Y;IAOI,mB;G;qCAPJ,Y;IAQI,iB;G;qCARJ,Y;IASI,iB;G;uCATJ,iC;IAAA,uBAOI,2CAPJ,EAQI,qCARJ,EASI,qCATJ,C;G;mCAAA,Y;IAAA,OAOI,sDAPJ,IAQI,wCARJ,KASI,wCATJ,O;G;mCAAA,Y;IAAA,c;IAOI,wD;IACA,sD;IACA,sD;IATJ,a;G;iCAAA,iB;IAAA,4IAOI,0CAPJ,IAQI,sCARJ,IASI,sCATJ,I;G;ECKmB,iD;;IACf,wB;IACA,sB;IACA,wB;G;EARJ,8B;;G;4CAAA,Y;;G;;;;;;;;;EAAA,gC;;;;;;G;gGAAA,Y;IAAA,gC;G;qDAAA,0B;;;;;;G;uDAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;oDAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;kCAAA,Y;IAMI,mB;G;kCANJ,Y;IAOI,kB;G;kCAPJ,Y;IAQI,oB;G;mCARJ,yC;IAAA,oBAMI,+CANJ,EAOI,4CAPJ,EAQI,8CARJ,C;G;gCAAA,Y;IAAA,OAMI,mDANJ,IAOI,0CAPJ,KAQI,8CARJ,O;G;gCAAA,Y;IAAA,c;IAMI,wD;IACA,uD;IACA,yD;IARJ,a;G;8BAAA,iB;IAAA,4IAMI,0CANJ,IAOI,wCAPJ,IAQI,4CARJ,I;G;ECAA,qC;;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAOI,sD;IAAK,sD;IAPT,oC;G;;EAOI,wC;IAAA,yB;IAAA,gC;G;;EAAK,wC;IAAA,yB;IAAA,gC;G;EAPT,kC;;G;gDAAA,Y;;G;;;;;;;;;EAAA,oC;;;;;G;oGAAA,Y;IAAA,gC;G;yDAAA,0B;;G;2DAAA,mB;;G;wDAAA,Y;;G;;;;;;;;;;EAAA,+B;IAAA,uE;G;;EAAA,oC;IAAA,a;WAAA,K;QAAA,qC;WAAA,K;QAAA,qC;;QAAA,2E;;G;;;;ECAA,qC;;;;G;;ECAA,mC;;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAUI,oD;IACA,wD;IACA,0D;IAZJ,kC;G;;EAUI,uC;IAAA,uB;IAAA,+B;G;;EACA,yC;IAAA,uB;IAAA,iC;G;;EACA,0C;IAAA,uB;IAAA,kC;G;EAZJ,gC;;G;8CAAA,Y;;G;;;;;;;;;EAAA,kC;;;;;;G;kGAAA,Y;IAAA,gC;G;uDAAA,0B;;G;yDAAA,mB;;G;sDAAA,Y;;G;;;;;;;;;;EAAA,6B;IAAA,yG;G;;EAAA,kC;IAAA,a;WAAA,M;QAAA,oC;WAAA,Q;QAAA,sC;WAAA,S;QAAA,uC;;QAAA,yE;;G;;;ECAA,yC;;;;;;;G;;ECE0B,8B;;IACtB,c;I5C4BA,IAAI,C6CmxPG,ED3yPK,QCmuPL,YAAQ,CAwER,C7CnxPP,C;MACI,c4CzB4B,sC;M5C0B5B,MAAM,8BAAyB,OAAQ,WAAjC,C;;G;qC4CvBV,iB;cAII,M;IAHA,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,IAAI,iBAAiB,qGAAe,KAAf,UAArB,C;MAAkD,OAAO,K;IAEzD,oE;IAEA,IAAI,CAAK,cAAJ,QAAI,EAAc,KAAM,IAApB,CAAT,C;MAAmC,OAAO,K;IAE1C,OAAO,I;G;uCAGX,Y;IACI,OAAW,gBAAJ,QAAI,C;G;EAtBnB,qC;;G;mDAAA,Y;;G;;;;;;;;;EAAA,uC;;;;G;uGAAA,Y;IAAA,gC;G;4DAAA,0B;;;;G;8DAAA,mB;;;;;;;;;;;;;;;;;;;;G;2DAAA,Y;;G;;;;;;;;;;;;;;;I5C+BI,IAAI,C6CmxPG,ED3yPK,SCmuPL,YAAQ,CAwER,C7CnxPP,C;MACI,c4CzB4B,sC;M5C0B5B,MAAM,8BAAyB,OAAQ,WAAjC,C;;;;;yC4CjCd,Y;IAGI,e;G;2CAHJ,e;IAAA,2BAGI,+BAHJ,C;G;uCAAA,Y;IAAA,OAGI,kDAHJ,M;G;;;;;;0DEWI,Y;IAKI,OAA4B,wDAA3B,IAE8B,4D;G;yDAEnC,6B;IAE+B,wDAAO,iBAAP,C;IACI,4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AlB,C;;;YAHoB,qBxE5gBrC,SF5DoC,Q;YZSd,kBAArB,6B;YaPR,IAHyB,KAGzB,C;cCyDA,WDxDI,UAAS,sBAAW,I;cCwDxB,WDvDI,IAAI,WAAW,kC;;cCuDnB,WDrDI,UAAS,sBAAW,K;cACpB,aAAQ,mC;chBdR,IADE,MACF,S;gBiBkEJ,WjBjEQ,QAAY,gB;gBCJiD,2B;;gBAAkB,uB;;;oBC0BpC,wE;;oBAGrD,sC;sBAHqD,sBAInD,I;sBAJmD,sB;;sBAAA,a;;;;gBe2CnD,WjBhEQ,YCLgD,mD;qBDOpD,kBALE,MAKF,mB;gBiB8DJ,WjB7DQ,QAAY,M;gBiB6DpB,WjB5DQ,YAAW,I;;gBiB4DnB,WjBzDQ,QAAY,M;gBCZiD,2B;;gBAAkB,uB;;;oBC0BpC,wE;;oBAGrD,sC;sBAHqD,sBAInD,I;sBAJmD,sB;;sBAAA,a;;;;gBe2CnD,WjBxDQ,YCbgD,mD;;;;YwFylBxC,IxEphBhB,WwEohBgB,8B;YtFnlB2B,gB;4BAAA,CAA7B,uBcgEP,WdhEO,OAA6B,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;YaK7B,a;kCyEukB8B,a;YGrce,Y;YAAA,eH+cvB,mBG/cuB,K;Y3F7IU,2B;;YAAkB,uB;;;gBC0BpC,oE;;gBAGrD,sC;kBAHqD,sBAInD,I;kBAJmD,sB;;kBAAA,a;;;;Y0FmHa,gB;4BAAA,8B3F7IR,qD2F6IQ,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAL,8BAAK,wBAAL,sC;YH+c/C,WAAiC,a;YACjC,aAAa,mBAAS,O;YAEtB,IAAI,+BAAU,wBAAe,GAAzB,QAAJ,C;cACI,QAAO,cAAK,2CAAL,C;cACP,2CAAqB,KAArB,C;cACA,qCAAe,kDAAO,oBAAO,SAAd,EAAf,C;cACA,yCAAmB,IAAnB,C;cAlBR,OAmBQ,2HAnBR,M;;cAqBQ,QAAO,cAAK,6CAAL,C;cACP,qC;cAtBR,OAuBQ,mCAAa,IAAb,4CAvBR,M;;;;;;;;;;YAyBE,gC;cACE,qC;cACA,QAAO,eAAM,kCAAN,C;cACP,OAAQ,KAAI,CAAJ,C;cA5BZ,OA6BI,4HA7BJ,M;;cAAA,O;;;;;;;;;;;;;;;;;;;;;;;;G;E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AArB,kBAAsC,Y;K;G;EAE3C,kF;IAAE,kCAAwB,I;IAAK,W;G;EA5B7B,6M;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,wE;IAAA,4C;IAAA,gD;IAAA,oD;IAAA,wB;IAAA,4B;G;;;;sFAAA,Y;;;;;YAEf,6CAAM,4BAA2B,IAA3B,C;YACuB,IAAI,qEAAU,oBAAW,KAArB,QAAJ,C;cACR,gBAAjB,6CAAM,W;cpG3TI,kBAArB,6B;coG2TiC,kD;cAAA,sD;cAGV,Q;cAFR,ItFxbpB,WsFwboB,EAAI,gBAAJ,C;cACA,YtFzbpB,WsFyboB,EAAoC,4BAApC,C;cACA,WAAQ,4E;cvG5fxB,IADE,IACF,S;gBiBkEJ,WjBjEQ,QAAY,gB;gBCJiD,2B;;gBAAkB,qB;;;oBC0BpC,qE;;oBAGrD,oC;sBAHqD,oBAInD,I;sBAJmD,sB;;sBAAA,W;;;;gBe2CnD,WjBhEQ,YCLgD,iD;qBDOpD,kBALE,IAKF,mB;gBiB8DJ,WjB7DQ,QAAY,I;gBiB6DpB,WjB5DQ,YAAW,I;;gBiB4DnB,WjBzDQ,QAAY,I;gBCZiD,2B;;gBAAkB,uB;;;oBC0BpC,uE;;oBAGrD,sC;sBAHqD,sBAInD,I;sBAJmD,sB;;sBAAA,a;;;;gBe2CnD,WjBxDQ,YCbgD,qD;;cgBsEjD,WdaP,UAAiB,sBAAW,K;cA7Ee,gB;8BAAA,CAA7B,uBcgEP,WdhEO,YAA6B,e;kBAAA,qC;uBAAA,mB;cAAA,Q;;coG4fV,kBAAjB,6CAAM,W;cpGzSK,oBAArB,6B;coGySiC,oD;cAAA,wD;cAGX,U;cAFR,ItF9bpB,asF8boB,EAAI,kBAAJ,C;cACA,YtF/bpB,asF+boB,EAAoC,4BAApC,C;cACA,aAAQ,kF;cvGlgBxB,IADE,MACF,S;gBiBkEJ,ajBjEQ,QAAY,gB;gBCJiD,2B;;gBAAkB,uB;;;oBC0BpC,uE;;oBAGrD,sC;sBAHqD,sBAInD,I;sBAJmD,sB;;sBAAA,a;;;;gBe2CnD,ajBhEQ,YCLgD,mD;qBDOpD,kBALE,MAKF,mB;gBiB8DJ,ajB7DQ,QAAY,M;gBiB6DpB,ajB5DQ,YAAW,I;;gBiB4DnB,ajBzDQ,QAAY,M;gBCZiD,6B;;gBAAkB,yB;;;oBC0BpC,yE;;oBAGrD,wC;sBAHqD,wBAInD,I;sBAJmD,sB;;sBAAA,e;;;;gBe2CnD,ajBxDQ,YCbgD,yD;;cgBsEjD,ad6CP,UAAiB,sBAAW,M;cA7Ge,gB;8BAAA,CAA7B,uBcgEP,adhEO,cAA6B,e;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;;;YAmN3C,a;YoGySiC,+B;YAPQ,gB;;;YpG1TzC,a;YoG2TiC,+B;YADQ,gB;;;;YX9WkB,Y;YAAA,eW2XvB,mBX3XuB,K;Y3F7IU,2B;;YAAkB,yB;;;gBC0BpC,sE;;gBAGrD,wC;kBAHqD,wBAInD,I;kBAJmD,sB;;kBAAA,e;;;;Y0FmHa,gB;4BAAA,8B3F7IR,uD2F6IQ,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAL,8BAAK,wBAAL,sC;YW2X/C,WAAiC,a;YACjC,aAAa,mBAAS,O;YACtB,6CAAM,4BAA2B,KAA3B,C;YAEN,IAAI,+BAAU,wBAAe,GAAzB,QAAJ,C;cACI,QAAO,cAAK,yEAAL,C;cACP,6CAAM,4G;cACN,6CAAM,mCAAkC,6CAAM,SAAxC,C;cAtBV,OAuBI,kDAAS,6DAAT,CAvBJ,M;;cAyBI,QAAO,cAAK,2EAAL,C;cACP,6CAAM,oBAAmB,IAAnB,4C;cA1BV,OA2BI,kDAAS,6DAAT,CA3BJ,M;;;;;;;;;;;;;;;;;;;G;EADe,4J;IAAA,yD;qBAAA,iM;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EAiCP,kE;IAAE,2F;G;EAGD,2E;IAAA,mB;MAAE,gDAA8B,SAAE,QAAhC,oC;K;G;8DA7GvB,oC;IAYuC,IAAZ,IAAY,EAIZ,MAJY,EAaZ,MAbY,EAiBZ,MAjBY,EAuCG,MAvCH,EAkDG,MAlDH,EA8Bd,M;IAjCrB,QAAO,cAAK,sEAAL,C;;MAGgB,QAAM,UAAM,OAAZ,M;aACf,e;UAAwD,OAAhC,uDAAgC,iBAAQ,MAAR,C;UAAxD,K;aACA,M;UAAe,W;UAAf,K;;;UAFe,K;;MAAnB,uB;MAImB,QAAM,UAAM,OAAZ,M;aACf,Y;aAAA,Y;UAAqE,SAA7B,oDAA6B,iBACpD,MADoD,C;UAArE,K;aAGA,Y;UAA8C,SAAzB,gDAAyB,iBAC7B,MAD6B,kC;UAA9C,K;;;UAJe,K;;MAAnB,yB;MASmB,QAAM,UAAM,OAAZ,M;aACf,U;UAA+C,SAA5B,mDAA4B,iBAAQ,MAAR,C;UAA/C,K;aACA,M;UAAuC,SAAxB,+CAAwB,iBAAQ,MAAR,C;UAAvC,K;;;UAFe,K;;MAAnB,yB;MAImB,QAAM,UAAM,OAAZ,M;aACf,uB;UAAuE,SAAvC,8DAAuC,iBAAQ,MAAR,C;UAAvE,K;aACA,U;UAA8C,SAA3B,kDAA2B,iBAAQ,MAAR,C;UAA9C,K;aACA,a;UAAoD,SAA9B,qDAA8B,iBAAQ,MAAR,C;UAApD,K;aACA,M;UAAe,a;UAAf,K;;;UAJe,K;;MAAnB,yB;MAMA,WAAW,SACA,+BAAO,oBAAO,SAAd,EADA,0BAE2B,UAAxB,iBAAO,oBAAO,SAAd,CAAwB,CAF3B,C;MAIX,iBAA4B,mBAAQ,+BAAO,oBAAO,OAAd,EAAR,C;MAGX,QAAM,UAAM,SAAZ,M;aACb,c;UACI,gCACW,IADX,uCAGiB,UAHjB,UAI0B,2BAJ1B,EAK0B,YAL1B,EAM0B,YAN1B,EAO0B,0GAP1B,C;UADJ,K;aAWA,W;UACI,gCACW,IADX,oCAGiB,UAHjB,UAI0B,IAJ1B,EAK0B,YAL1B,EAM0B,YAN1B,EAO0B,6GAP1B,C;UADJ,K;aAWA,c;UtFxeoB,MAAM,8B;asFye1B,W;UtFzeoB,MAAM,8B;;;UsFidb,K;;MADjB,uB;MA4BA,IAAI,iCAAU,oBAAW,KAArB,aAA6B,iCAAU,oBAAW,MAArB,SAAjC,C;QACI,QAAO,cAAK,8DAAL,C;QACP,UAAM,4H;;MAEE,OAAZ,WAAY,kBAAO,0FAAP,C;;MA+Bd,2C;QACI,gBAAF,CAAE,C;QACF,QAAO,cAAK,sDAAL,C;QACP,UAAM,uH;aACR,8B;QACE,QAAO,eAAM,yDAAN,C;QACP,OAAQ,KAAI,CAAJ,C;QACR,UAAM,6G;;QApGV,O;;G;EAsHY,oF;IAAA,mB;MAAE,iEAAwD,kBAAW,SAAnE,M;K;G;EAiCF,kF;IAAA,mB;MAAE,8BAAoB,c;K;G;EAWtB,kF;IAAA,mB;MAAE,8BAAoB,c;K;G;EAatB,kF;IAAA,mB;MAAE,8BAAoB,c;K;G;EAatB,kF;IAAA,mB;MAAE,8BAAoB,c;K;G;gEApFtC,gG;IAKI,0B;MAAA,aAA2C,U;IAC3C,oB;MAAA,OAAc,I;IACd,0B;MAAA,4C;IACA,4B;MAAA,eAAqC,I;IACrC,4B;MAAA,eAAqC,I;IACrC,4B;MAAA,eAAqC,I;IACrC,4B;MAAA,eAAqC,I;IAQlB,IADX,IACW,EAOX,MAPW,EAgBA,MAhBA,EAiBA,MAjBA,UA2BN,MA3BM,EA8Bf,MA9Be,EAsCN,MAtCM,EAyCf,MAzCe,EAmDN,MAnDM,EAsDf,MAtDe,EAgEN,OAhEM,EAmEf,O;IAxEJ,QAAO,cAAK,kEAAL,C;IAIC,6BACI,oBAAO,SADX,EAEI,oBAAO,SAFX,wCAKmB,+BALnB,EAIgB,eAJhB,EAMe,IANf,C;IAQA,+BACI,oBAAO,SADX,EAEoB,QAAhB,oBAAO,SAAS,EAAQ,GAAR,EAAa,GAAb,CAFpB,4CAKiC,SAAd,kCAAc,CALjC,EAIgB,eAJhB,EAMe,IANf,C;IASW,SAAP,oBAAO,O;IACA,SAAP,oBAAO,O;;IAEuB,gBAAT,mB;IjDi/U9B,kBAAM,iBAAa,gBAAb,C;IA+UA,W;IAAb,0D;MAAa,WAAb,kB;MACI,WAAY,WAAc,IiDj0VyB,WjDi0VvC,C;;IiDv1VZ,aAAa,eACT,sBAiBI,8CjDs0VL,WiDt0VK,EAMmB,UAAW,WAN9B,EAKgB,eALhB,EAOe,IAPf,CAjBJ,EADS,E;IA8Bb,aAAa,gFAAwB,UAAW,O;IAChD,QAAO,cAAK,gEAAL,C;IAEH,QAAM,MAAN,M;WACI,e;QAAwB,qE;QACpB,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,yD;;UAApB,c;QADoD,uC;QAAxD,K;WAGA,M;QAAe,SzFjhBW,W;QyFihB1B,K;;;QAJJ,K;;IADJ,MAAO,uB;IASP,aAAa,gFAAwB,UAAW,O;IAChD,QAAO,cAAK,gEAAL,C;IAEH,QAAM,MAAN,M;WACI,Y;WAAA,Y;QAAwC,kE;QACpC,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,sD;;UAApB,c;QADiE,uC;QAArE,K;WAGA,Y;QAAqB,8D;QACjB,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,kD;;UAApB,c;QAD0C,uC;QAA9C,K;;;QAJJ,K;;IADJ,MAAO,uB;IAWP,aAAa,gFAAwB,UAAW,O;IAChD,QAAO,cAAK,gEAAL,C;IAEH,QAAM,MAAN,M;WACI,U;QAAmB,iE;QACf,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,qD;;UAApB,c;QAD2C,uC;QAA/C,K;WAGA,M;QAAe,6D;QACX,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,iD;;UAApB,c;QADmC,uC;QAAvC,K;;;QAJJ,K;;IADJ,MAAO,uB;IAWP,aAAa,kFAAwB,UAAW,O;IAChD,QAAO,cAAK,gEAAL,C;IAEH,QAAM,MAAN,M;WACI,uB;QAAgC,4E;QAC5B,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,gE;;UAApB,c;QADmE,wC;QAAvE,K;WAGA,U;QAAmB,gE;QACf,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,oD;;UAApB,c;QAD0C,wC;QAA9C,K;WAGA,a;QAAsB,mE;QAClB,W;QAAA,yB;UAAoB,W;UAApB,UAAoB,wBAApB,YAAoB,uD;;UAApB,c;QADgD,wC;QAApD,K;WAGA,M;QAAe,UzF5jBW,W;QyF4jB1B,K;;;QAVJ,K;;IADJ,MAAO,wB;IAeP,OAAc,OAAP,MAAO,C;G;;EAOwB,gE;IAAA,4B;MAClC,SAAK,eAAM,eAAN,C;MACT,W;K;G;EAHiB,yD;IAAA,4B;MACjB,4DAAsC,sDAAtC,C;MAGJ,W;K;G;EANJ,0C;IAEI,OAAO,4BAAc,uCAAd,E;G;E1FkkCP,8G;IACE,OAAO,c;MACL,OAAO,IAAI,UAAJ,CAAe,iBAAe,CAAC,CAAC,MAAD,EAAS,YAAa,IAAG,IAAK,GAAE,UAAU,CAAC,YAAD,CAAZ,GAA6B,IAA3D,EAAiE,aAAjE,EAAgF,mBAAoB,IAAG,IAAK,GAAE,UAAU,CAAC,mBAAD,CAAZ,GAAoC,IAAhJ,EAAsJ,YAAtJ,EAAoK,kBAAmB,IAAG,IAAK,GAAE,UAAU,CAAC,kBAAD,CAAZ,GAAmC,IAAlO,EAAwO,MAAxO,EAAgP,YAAhP,EAA8P,OAA9P,EAAuQ,eAAvQ,CAAD,CAA9B,EAAyT,EAAzT,C;K;G;ED1rBX,gC;IACE,OAAO,IAAI,QAAJ,CAAa,IAAI,SAAjB,EAA4B,EAA5B,C;G;ECmzCT,sC;IACE,OAAO,c;MACL,OAAO,IAAI,WAAJ,CAAc,eAAe,CAAC,OAAD,EAAU,eAAV,CAA7B,EAAyD,EAAzD,C;K;G;EAx4BX,uF;IACE,OAAO,c;MACL,OAAO,IAAI,SAAJ,CAAc,iBAAe,CAAC,CAAC,QAAD,EAAW,cAAX,EAA2B,SAA3B,EAAsC,eAAgB,IAAG,IAAK,GAAE,UAAU,CAAC,eAAD,CAAZ,GAAgC,IAA9F,EAAoG,QAApG,EAA8G,cAAe,IAAG,IAAK,GAAE,UAAU,CAAC,cAAD,CAAZ,GAA+B,IAApK,EAA0K,OAA1K,EAAmL,eAAnL,CAAD,CAA7B,EAAoO,EAApO,C;K;G;E4Fx7C2B,2B;IAAC,W;G;;EA0B3C,wB;;G;EASmC,qE;IAAA,wB;MACf,6CAAyB,KAAzB,EAAgC,uBAAM,kBAAtC,C;MACJ,W;K;G;EAKM,+D;IACF,sBAAY,I;IACZ,oBAAU,C;IACd,W;G;EAKiE,6D;IAAE,S;G;EAWjD,0F;IAAA,4B;MACF,iBAAO,I;MACP,eAAK,E;MACL,eAAK,iB;MACT,W;K;G;EAuBgC,0H;IAAA,mB;MAAE,6CAAoC,iBAAU,KAA9C,UAAsD,gB;K;G;EAF7D,iG;IAAA,wB;MACS,IAAM,I;MAAtB,eAAkD,CAAlC,cAAM,OAAN,KAAM,OAAN,uCAAkC,O;MAClD,QAAO,cAAK,wGAAL,C;MADP,OAEA,I;K;G;EAlBW,+G;IAAA,4B;MACf,sBAAW,uBAAM,uBAAN,IAAgC,iBAAU,SAArD,C;MACA,yBAAe,cAAA,iBAAU,aAAV,C;MACf,iBAAO,iBAAU,K;MACjB,gBAAM,I;MACwB,kBAApB,cAAA,iBAAU,QAAV,C;M1Gq6C3C,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAuEA,Q;MAAA,6B;MAAb,OAAa,cAAb,C;QAAa,sB;qBACT,W;Q0G1+CsD,kB;QAAV,IAAI,CAAM,SAAN,uBAAM,OAAN,0BAAgB,oBAAW,OAA3B,QAAJ,C;UACI,oB;;UAEA,kB;;Q1Gu+CpC,YAAZ,WAAY,E0G5+C4B,wB1G4+Cd,I0G5+Cc,E1G4+Cd,I0G5+Cc,S1G4+C5B,C;;M0G7+CwB,oB1G8+CjC,W;M0Gp+CiC,qBAAW,uF;MAKf,W;K;G;EAYU,0G;IAAA,4B;MACF,IAAI,iBAAU,UAAV,QAAJ,C;QACI,sBAAY,iBAAU,U;;MAE1B,oBAAU,U;MACd,W;K;G;EAYmB,gG;IAAE,W;G;EAVF,6H;IAAA,4B;MACX,sBAAW,uBAAM,uBAAN,IAAgC,iBAAU,SAArD,C;MACA,iBAAO,iBAAU,K;MACjB,eAAK,iBAAU,M;MACf,kBAAQ,iBAAU,M;MAClB,oBAAa,iBAAU,MAAb,W;MACV,sBAAY,I;MACgB,kBAAT,iB;MnDs7V5D,kBAAM,iBAAa,kBAAb,C;MA+UA,Q;MAAb,mD;QAAa,WAAb,iB;QACI,WAAY,WAAc,ImDtwWuD,WnDswWrE,C;;MmDtwWgC,oBnDuwWzC,W;MmDtwWyC,yBAAe,cAAA,iBAAU,aAAV,C;MACf,oBAAU,cAAA,iBAAU,QAAV,C;MACV,qBAAW,kF;MACf,W;K;G;EAnBI,sH;IAAA,4B;MACR,wBAAM,gGAAN,C;MAMA,wBACI,eAAe,mHAAf,CADJ,C;MAcJ,W;K;G;EAYsB,sH;IAAA,4B;MAIC,UAaG,MAbH,EAaP,M;MAhBR,IAAI,iBAAU,UAAV,QAAJ,C;QACI,sBAAY,iBAAU,U;;MAGC,kBAAvB,iBAAU,a;MADC,I9FkKpD,uBAAqB,QAAL,WAAK,C8FjKoB,IACA,OAAA,iBAAU,aAAV,EAA0B,MAA1B,CAFW,C;QAIX,S;;QAEU,OAAV,iBAAU,a;;MANd,6B;MAQA,sBAAW,uBAAM,uBAAN,IAAgC,iBAAU,SAArD,C;MACA,iBAAO,iBAAU,K;MACjB,kBAAQ,iBAAU,M;MAClB,iBAAO,iBAAU,KAAK,W;MACtB,oBAAU,U;MACF,IAAI,CAAM,SAAN,uBAAM,OAAN,0BAAgB,oBAAW,OAA3B,QAAJ,C;QACJ,oB;;QAEA,kB;;MAHJ,wB;MAKJ,W;K;G;EAaiB,6H;IAAA,4B;MACb,uB;MAAM,2C;MAAA,2C;M5Fmb1C,WAAS,M;M4Fjb8C,Q;MADf,sBAAW,yBAAM,uBAAN,IAAgC,mBAAU,SAArD,C;MAE2B,kBAAvB,mBAAU,a;MADC,I9FgIxD,uBAAqB,QAAL,WAAK,C8F/HwB,IACA,OAAA,mBAAU,aAAV,EAA0B,MAA1B,CAFW,C;QAIX,c;;QAEU,OAAV,mBAAU,a;;MANd,6B;MAQA,kBAAQ,mBAAU,K;MAE1B,W;K;G;EAOE,2F;IACF,kBAAQ,S;IACR,sBAAY,O;IAChB,W;G;EAC8C,kG;IAAE,W;G;EAArB,2F;IAAE,kEAAiB,6EAAjB,C;IAAqB,W;G;EAL3C,+G;IAAA,4B;MACP,wBAAM,sEAAN,C;MAIA,wBAAM,4BAAqB,sEAArB,EAAN,C;M5F8gDlC,IAAI,cAAc,WAAW,UAAU,eAAe,CAAC,cAAY,CAT1D,IAS0D,EAPnD,IAOmD,EALpD,IAKoD,EAH1D,IAG0D,EADvD,IACuD,CAAb,C;M4F7gDd,2C;MACI,2C;M5F0ZvC,kBAmnCC,WAnnCS,M;M4FzZ2B,wBAAW,yBAAM,uBAAN,IAAgC,mBAAU,SAArD,C;MACA,mBAAO,mBAAU,K;MACjB,iC;MACA,wBAAS,IAAT,C;M5F0gDjC,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;M4FvgDO,W;K;G;EA/IP,yH;IAAA,4B;MACD,wBAAM,gFAAN,C;MAMA,QAAM,iBAAU,KAAhB,M;aAEI,O;UACI,wBACI,mBAAmB,qGAAnB,CADJ,C;UADJ,K;aA0BA,Q;U7F66B1B,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;U6F56BnB,2C;UAAA,2C;U7FyOnC,kBAosBC,WApsBS,I;U6FvOuB,8BAAkB,OAAH,EAAG,CAAlB,C;UACA,2BAAe,OAAH,EAAG,CAAf,C;UACA,6BAAiB,OAAH,EAAG,CAAjB,C;U7Fy6BhC,W6Fv6B4B,uDAAY,gHAAZ,C;U7Fw6BzB,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;U6F/6BG,K;aAgCA,M;aAAA,U;aAAA,Q;U7F64B1B,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;U6F54BnB,2C;UAAA,2C;U7FyMnC,kBAosBC,aApsBS,I;U6FvMuB,8BAAkB,OAAH,EAAG,CAAlB,C;UACA,2BAAe,OAAH,EAAG,CAAf,C;UACA,6BAAiB,OAAH,EAAG,CAAjB,C;U7Fy4BhC,a6Fv4B4B,eACI,kBAAkB,gHAAlB,CADJ,C;U7Fw4BzB,uBAAc,CAAC,aAAW,OAAO,EAAnB,C;U6F/4BG,K;aAmCA,U;U7F02B1B,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;U6Fz2BnB,2C;UAAA,2C;U7FsKnC,kBAosBC,aApsBS,I;U6FpKuB,8BAAkB,OAAH,EAAG,CAAlB,C;UACA,2BAAe,OAAH,EAAG,CAAf,C;UACA,6BAAiB,OAAH,EAAG,CAAjB,C;U7Fs2BhC,a6Fp2B4B,eACI,iBAAiB,iH7Fm2BjD,a6Fn2BiD,CAAjB,CADJ,C;U7Fq2BzB,uBAAc,CAAC,aAAW,OAAO,EAAnB,C;U6F52BG,K;aA0BA,M;UACI,+DAAW,qGAAX,C;U5FuoE9B,IAAI,gBAAc,WAAW,UAAU,eAAe,CAAC,WAAW,CADtD,IACsD,CAAZ,C;UAChD,a4FxnE4B,mBAAW,uBAAX,C;U5FynEzB,uBAAc,CAAC,aAAW,OAAO,EAAnB,C;U4F1oEG,K;;UAqBQ,MAAM,eAAU,MAAV,C;;MAEtB,W;K;G;EAME,sE;IACF,iBAAO,I;IACP,eAAK,E;IACL,eAAK,E;IACT,W;G;EAWc,4F;IAAA,4B;MAEgB,UAAV,M;MADR,iBAAwB,yC;MAChB,IAAI,CAAM,OAAN,uBAAM,OAAN,wBAAgB,oBAAW,OAA3B,QAAJ,C;QACJ,oB;;QAEA,kB;;MAHJ,wB;MAKA,oBAAU,W;MACd,W;K;G;EAOa,oF;IAAE,W;G;EAhBN,qF;IAAA,4B;MACT,wBAAM,kFAAN,C;M7FoyBtB,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;M6F3xB3B,2C;MAEF,gB7F0xBxB,WApsBS,I6FtFe,EAAgB,OAAF,CAAE,CAAhB,C;M7F0xBxB,W6FxxBoB,mBAAC,yBAAM,iBPnF2B,cOmFlC,C;M7FyxBjB,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;M6FvxBD,8DAAa,+DAAb,C;MACJ,W;K;G;EAhCH,uE;IAAA,4B;MACD,wBAAM,iDAAN,C;M7FmzBd,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;M6F9yBnC,2C;M7F2GnB,kBAosBC,WApsBS,I;M6FzGO,4C;MACA,4C;MACA,yC;MACA,2C;MACA,2BAAe,OAAH,EAAG,CAAf,C;MACA,6BAAiB,OAAH,EAAG,CAAjB,C;M7FwyBhB,W6FtyBY,kDAAa,6EAAb,C;M7FuyBT,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;M6FpxBb,W;K;G;EAjNC,8D;IAAA,4B;MACD,wBAAM,0CAAN,C;MAMyB,kBAAzB,uBAAM,mB;M1G+uDF,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;Q0G/uD6B,2C;Q1Gi8CtC,kBAAM,iBAAa,wBA8SG,OA9SH,EAAwB,EAAxB,CAAb,C;QAuEA,U;QAAA,SAuOgB,OAvOhB,W;QAAb,OAAa,gBAAb,C;UAAa,wB;UACT,WAAY,WAAc,I0GvgDS,KAAH,G1GugDN,I0GvgDmB,a1GugDjC,C;;Q0GvgDA,gBAAgD,a1GwgDzD,W0GxgDyD,0CAAa,+CAAb,C;QAEhD,gBACgB,K1G0uDH,O0G1uDgB,KAAb,I;Q1G0uDhB,U;QAAA,SAAa,OAAb,W;QAAhB,OAAgB,gBAAhB,C;UAAgB,6B;U0GruDI,gB1GquDS,S0GruDO,KAAV,G1GquDG,S0GruDwB,a;UAEjC,yDAAK,kE1GmuDI,S0GnuDJ,sBAAL,C;;;MA4JR,yDAAK,6DAAL,C;MAmCJ,W;K;G;yCA9NR,qB;I5Fu6CE,IAAI,cAAc,WAAW,UAAU,eAAe,CAAC,WAAW,CAPvD,IAOuD,EALtD,IAKsD,EAHvD,IAGuD,EADtD,IACsD,CAAZ,C;IAt2BjD,kBAu2BC,WAv2BS,M;I4F5jBL,qBAAS,UAAM,S;IACf,kCAAmB,8CAAnB,C;I5Fk6CJ,W4F55CA,gDAAK,uCAAL,C;I5F65CG,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;G;E4FhsCT,wD;IAAE,wD;G;EAKD,uF;IAAA,mB;MAAE,sBAAa,cAAO,KAApB,iBAAoC,aAAM,KAA1C,a;K;G;EACe,yE;IAAA,mB;MAAE,gBAAO,UAAG,IAAV,gBAAwB,UAAG,M;K;G;EAC9B,2E;IAAA,mB;MAAE,0BAAiB,UAAG,I;K;G;EAU5B,oM;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kD;IAAA,8E;IAAA,4C;IAAA,0C;G;;;;8EAAA,Y;;;;;YACM,Q;YAAA,IAAI,OAAA,kCAAM,SAAN,EAAkB,SAAlB,CAAJ,C;cACjB,OAAE,OAAF,GAAW,kCAAM,S;;cAEjB,OAAE,OAAF,GAA0B,QAAf,kCAAM,SAAS,EAAQ,QAAR,EAA4B,kCAAM,SAAS,WAA3C,C;;;YAH9B,yB;YAAA,OAKA,2CAAwB,kCAAM,OAA9B,EAAsC,cAAtC,EAAsD,yBAAtD,EAA8D,wBAA9D,C;;;;;;;;;;;;;;;;;G;EANe,mJ;IAAA,yD;qBAAA,wL;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EASP,yG;IAAA,mB;MAAE,iDAAuC,uBAAvC,mBAAkE,wBAAlE,gC;K;G;sDAjCtB,sC;IAU0C,IAAE,IAAF,EACA,M;IANtC,CAAE,iB;IAEF,QAAO,cAAK,4CAAL,C;IAEP,aACa,gCAAyB,cAAE,OAAF,CAAE,OAAF,sCAAzB,C;IACb,YAAY,+BAAwB,cAAE,SAAF,CAAE,OAAF,wCAAxB,C;IACZ,QAAO,eAAM,6DAAN,C;IdpFK,U;IAAA,ScqFZ,Mf6EgF,QAAQ,W;IClK5F,OAAgB,gBAAhB,C;MAAgB,2B;McqFK,QAAO,eAAM,oDdrFL,OcqFK,CAAN,C;;IdrFZ,U;IAAA,ScsFZ,Kf4EgF,QAAQ,W;IClK5F,OAAgB,gBAAhB,C;MAAgB,6B;McsFI,QAAO,eAAM,sDdtFJ,ScsFI,CAAN,C;;IAEvB,sBACsB,MAAO,KAAP,GAAc,KAAM,KAApB,I;IACtB,yBAAqB,CAArB,C;I1G8gDY,U;IAAA,S0G7gDZ,UAAM,mB1G6gDM,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;M0G7gDuB,sC1G6gDV,S0G7gD+B,KAArB,I;;IAGnC,IAAI,qBAAkB,eAAtB,C;MAEgB,OAAZ,WAAY,kBAAO,4FAAP,C;;MASZ,QAAO,cAAK,+EAAL,C;MACP,UAAM,uH;;G;sDAId,gB;IAG+B,Q;IAD3B,aAAa,c;IACc,OAAd,IAAK,SAAS,O;IAA3B,aAAU,CAAV,iB;MAC0B,gBAAtB,IAAK,SAAS,MAAK,CAAL,C;MAEA,U;MADN,2BxFnPhB,SwFmPgB,mB;MAAA,W;QAAkC,S9FVC,CAAC,QMzOpD,SwFmP4C,M9FVQ,C;;M8FUxC,W;QACU,SxFpPtB,SwFoPsB,K;QACF,mBAAmB,2CAAnB,E;UAAiC,UxFrPrD,SwFqP4D,K;UAAP,YxFrPrD,SwFqPoE,M;Uf9EpE,mBAAI,GAAJ,EAAS,KAAT,C;ee+EoB,mBAAe,uCAAf,E;UAA6B,YxFtPjD,SwFsPwD,K;UAAP,cxFtPjD,SwFsPgE,M;Uf/EhE,mBAAI,KAAJ,EAAS,OAAT,C;eegFoB,mBAAiB,yCAAjB,E;UAA+B,YxFvPnD,SwFuP0D,K;UAAP,cxFvPnD,SwFuPkE,M;UfhFlE,mBAAI,KAAJ,EAAS,OAAT,C;eeiFoB,mBAAgB,wCAAhB,E;UAA8B,IxFxPlD,SwFwPsD,QAAJ,C;YAAe,YxFxPjE,SwFwPwE,K;YAAP,cxFxPjE,SwFwPgF,M;YfjFhF,mBAAI,KAAJ,EAAS,OAAT,C;;;UekFoB,mBAAmB,2CPzHuB,cOyH1C,E;YAA6C,YAAa,MxFzP9E,SwFyPwE,MAAM,GAAM,OAAN,EAAN,aAAqB,CAArB,C;YAAP,cAAwC,MxFzPzG,SwFyPmG,MAAM,GAAM,OAAN,EAAN,aAAqB,CAArB,C;YflFnG,mBAAI,KAAJ,EAAS,OAAT,C;;YeoFwB,OAAQ,KAAI,UAAJ,C;;;;;IAM5B,OAAO,M;G;qDAGX,gB;IAG+B,Q;IAD3B,aAAa,c;IACc,OAAd,IAAK,SAAS,O;IAA3B,aAAU,CAAV,iB;MAC0B,gBAAtB,IAAK,SAAS,MAAK,CAAL,C;MACV,IAAI,cxFzQhB,SwFyQgB,uBAA4B,OxFzQ5C,SwFyQ4C,OAAuB,uCAAvB,CAAhC,C;QACI,WAAW,cxF1Q3B,SwF0Q2B,ODnR8B,CCmRtB,CDnRsB,C;QCoRzC,IAAI,YAAJ,C;UACI,UxF5QpB,SwF4Q2B,K;UfrG3B,mBAAI,GAAJ,EeqGmC,IfrGnC,C;;;;Ie0GI,OAAO,M;G;;EAOoB,qD;IAAA,4B;MACvB,SAAK,eAAM,eAAN,C;MACT,W;K;G;EAHiB,8C;IAAA,4B;MACjB,iDAA2B,2CAA3B,C;MAGJ,W;K;G;EANJ,+B;IAEI,OAAO,4BAAc,4BAAd,E;G;EAQgB,wH;IAyBvB,uB;MAAA,UACuB,K;IAzBvB,c;IAGA,wC;IAGA,gB;IAGA,wB;IAGA,oB;IAGA,wB;IAGA,4C;IAGA,oB;IAGA,sB;G;;0CA1BJ,Y;IAEI,e;G;0CAFJ,Y;IAKI,4B;G;0CALJ,Y;IAQI,gB;G;0CARJ,Y;IAWI,oB;G;0CAXJ,Y;IAcI,kB;G;0CAdJ,Y;IAiBI,oB;G;0CAjBJ,Y;IAoBI,8B;G;0CApBJ,Y;IAuBI,kB;G;0CAvBJ,Y;IA0BI,mB;G;4CA1BJ,wG;IAAA,4BAEI,+BAFJ,EAKI,sEALJ,EAQI,kCARJ,EAWI,8CAXJ,EAcI,wCAdJ,EAiBI,8CAjBJ,EAoBI,4EApBJ,EAuBI,wCAvBJ,EA0BI,2CA1BJ,C;G;wCAAA,Y;IAAA,OAEI,mDAFJ,IAKI,8DALJ,KAQI,sCARJ,KAWI,8CAXJ,KAcI,0CAdJ,KAiBI,8CAjBJ,KAoBI,kEApBJ,KAuBI,0CAvBJ,KA0BI,4CA1BJ,O;G;wCAAA,Y;IAAA,c;IAEI,oD;IAGA,iE;IAGA,qD;IAGA,yD;IAGA,uD;IAGA,yD;IAGA,mE;IAGA,uD;IAGA,wD;IA1BJ,a;G;sCAAA,iB;IAAA,4IAEI,kCAFJ,IAKI,4DALJ,IAQI,oCARJ,IAWI,4CAXJ,IAcI,wCAdJ,IAiBI,4CAjBJ,IAoBI,gEApBJ,IAuBI,wCAvBJ,IA0BI,0CA1BJ,I;G;ECvUA,yB;;G;EAMsB,uE;IAAA,4B;MACF,kBAAQ,wBAAM,W;MACd,oBAAU,wBAAM,a;MAChB,eAAK,O;MACL,sBAAY,K;MAChB,W;K;G;EANO,gE;IAAA,4B;MACP,wBAAM,6DAAN,C;MAMA,4BAAC,wBAAM,UAAP,C;MACJ,W;K;G;EAIwB,kE;IAAA,4B;MACZ,kBAAQ,wBAAM,a;MACd,sBAAc,OAAF,CAAE,C;MACd,yBAAiB,OAAF,CAAE,C;MACrB,W;K;G;EAjBN,yD;IAAA,4B;MACF,+DAAW,sDAAX,C;MAUA,IAAI,wBAAM,WAAV,C;QACI,wBACI,gBAAgB,wDAAhB,CADJ,C;;MASJ,wBAAM,wBAAM,MAAZ,C;MACJ,W;K;G;0CAxBJ,qB;IAEI,0DAAM,iCAAN,C;G;yCAyBJ,qB;IACI,sBAAY,K;G;;EAOgB,sD;IAAA,4B;MACxB,wBAAM,eAAN,C;MACJ,W;K;G;EAHiB,+C;IAAA,4B;MACjB,kDAA4B,4CAA5B,C;MAGJ,W;K;G;EANJ,gC;IAEI,OAAO,4BAAc,6BAAd,E;G;E9Fs9BP,gC;IACE,OAAO,IAAI,QAAJ,CAAa,IAAI,SAAjB,EAA4B,EAA5B,C;G;E+Ft/Bb,8B;;G;EAciC,8E;IAAA,4B;MAEI,IAAM,I;MADf,0BAAgB,I;MAChB,kBAA2C,CAAlC,cAAM,OAAN,aAAM,OAAN,uCAAkC,O;MAC/C,W;K;G;EATG,iF;IAAA,wB;MACP,kBAAkB,K;MAClB,IAAI,QAAA,6BAAM,SAAN,EAAkB,SAAlB,CAAJ,C;QACI,cAAc,6BAAM,UAAS,KAAT,C;;MAExB,IAAI,WAAJ,C;QACI,kCAAS,4DAAT,C;;MAKR,W;K;G;EAfE,0E;IAAA,4B;MACF,kBAAQ,6BAAM,M;MACd,iBAAO,6BAAM,K;MACb,gBAAM,6BAAM,I;MACZ,qBAAW,uE;MAYf,W;K;G;EAc8B,gI;IAAA,4B;MACF,qBAAW,6BAAM,S;MACjB,kBAAQ,UAAG,M;MAEX,oBAAU,OAAA,6BAAM,MAAN,EAAe,UAAG,KAAlB,C;MACV,iBAAO,O;MACX,W;K;G;EAPE,yH;IAAA,4B;MACF,wBAAM,sHAAN,C;MAOJ,W;K;G;EAT2B,kH;IAAA,4B;MAC3B,0DAAM,+GAAN,C;MASJ,W;K;G;EAbE,2G;IAAA,4B;MACF,kBAAQ,UAAG,M;MACX,kBAAQ,UAAG,K;MACX,oBAAU,4BAAqB,wGAArB,E;MAWd,W;K;G;EAfa,sG;IAAA,4B;MACb,wBAAM,iGAAN,C;MAeJ,W;K;G;EAzCD,mE;IAAA,4B;MACP,wBAAM,gEAAN,C;M/Fq/BN,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;M+Fp+B3C,uD;M/FiSX,kBAosBC,WApsBS,I;M+F/RD,uC;MACA,uBAAY,QAAJ,GAAI,CAAZ,C;M5GovDA,Q;MAAA,O4GlvDJ,+BAAM,Q5GkvDF,W;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QalxBR,W+F99BQ,4DAAiB,wD5GgvDJ,O4GhvDI,4BAAjB,C;;MAmBJ,IAAI,+BAAM,QAAQ,UAAlB,C;Q/F28BJ,W+F18BQ,mBAAC,qBAAD,C;;M/F28BL,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;M+Fx8BrB,W;K;G;+CAjDJ,qB;IACI,+DAAW,sCAAX,C;G;EAwDoE,sD;IAEhE,IAAI,KAAM,YAAN,IAAqB,CAAC,KAAM,cAAhC,C;MACI,cAAc,KAAM,a;;IAExB,sBAAsB,K;IACtB,oBAAoB,K;IACxB,W;G;8CAZJ,qB;IACI,wBAAc,I;IACd,0BAAgB,K;IAGa,qCAA7B,4BAAoE,8B;G;;EAcnC,2D;IAAA,4B;MAC7B,SAAK,eAAM,eAAN,C;MACT,W;K;G;EAHiB,oD;IAAA,4B;MACjB,uDAAiC,iDAAjC,C;MAGJ,W;K;G;EANJ,qC;IAEI,OAAO,4BAAc,kCAAd,E;G;EAQmB,iD;IAAC,kB;IAAmB,gB;IAAkB,kB;G;;6CADpE,Y;IAC+B,iB;G;6CAD/B,Y;IACkD,gB;G;6CADlD,Y;IACoE,iB;G;+CADpE,8B;IAAA,+BAC+B,qCAD/B,EACkD,kCADlD,EACoE,qCADpE,C;G;2CAAA,Y;IAAA,OAC+B,0DAD/B,IACkD,sCADlD,KACoE,wCADpE,O;G;2CAAA,Y;IAAA,c;IAC+B,sD;IAAmB,qD;IAAkB,sD;IADpE,a;G;yCAAA,iB;IAAA,4IAC+B,sCAD/B,IACkD,oCADlD,IACoE,sCADpE,I;G;E/F8gCI,4B;IACE,OAAO,IAAI,MAAJ,CAAW,IAAI,SAAf,EAA0B,EAA1B,C;G;EAzGT,gC;IACE,OAAO,IAAI,QAAJ,CAAa,IAAI,SAAjB,EAA4B,EAA5B,C;G;EgG1gCb,yB;;G;EAesB,uE;IAAA,4B;MACF,eAAK,IAAK,OASL,WARD,uQAGW,8BAAe,IAAf,CAHX,4PAMsB,+BANtB,mJAQC,CATK,C;MAWd,W;K;G;EAbA,gE;IAAA,4B;MACA,wBAAM,6DAAN,C;MAaJ,W;K;G;EAEU,yE;IAAA,4B;MACF,eAAK,IAAK,OASL,WARD,uQAGW,8BAAe,KAAf,CAHX,0ZAQC,CATK,C;MAWd,W;K;G;EAbA,kE;IAAA,4B;MACA,wBAAM,+DAAN,C;MAaJ,W;K;G;0CAzCR,qB;IhG2gCE,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;IgGvgCjD,YhGwgCJ,WApsBS,IgGpUL,EAAU,oBAAV,C;IhG+mCV,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,cAAD,C;IgG3mC7C,iBhG4mCR,aA5yBS,IgGhUD,EAAiB,OAAF,CAAE,CAAjB,C;IhG4mCR,agG1mCI,mBAAC,UAAM,MAAP,C;IhGkgCJ,WAyGG,cAAc,CAAC,aAAW,OAAO,EAAnB,C;IAzGjB,WgGhgCA,+CAAI,wCAAJ,C;IhGggCA,WgGj/BA,+CAAI,0CAAJ,C;IhGk/BG,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;G;uCgGh+BzB,e;IAEW,Q;IADP,iBAAyC,YAAvB,yBAAkB,GAAK,C;IAClC,IAAI,GAAJ,C;MACH,OAAE,UAAF,iB;;MAEA,QAAG,MAAM,UAAN,IAAH,kB;;IAHJ,W;G;uCAOJ,Y;IAAyB,gBAAO,yBAAkB,GAAzB,e;G;4CAEzB,Y;IACI,iBAAkB,UAAY,MAAb,IAA4B,UAAU,IAAV,GAAuB,UAAU,IAA7D,C;IACjB,IAAI,eAAc,GAAlB,C;MACI,aAAa,I;;IAEjB,IAAI,eAAc,GAAlB,C;MACI,aAAa,I;;IAEjB,OAAO,U;G;;EAOqB,sD;IAAA,4B;MACxB,wBAAM,eAAN,C;MACJ,W;K;G;EAHiB,+C;IAAA,4B;MACjB,kDAA4B,4CAA5B,C;MAGJ,W;K;G;EANJ,gC;IAEI,OAAO,4BAAc,6BAAd,E;G;EC5CX,0B;;G;EAMsB,kE;IAAA,4B;MACF,eAAK,yBAAM,Q;MACf,W;K;G;EAHO,2D;IAAA,4B;MACP,wBAAM,wDAAN,C;MAGA,4BAAC,yBAAM,MAAP,C;MACJ,W;K;G;EAeiB,8E;IAAA,4B;MACL,kBAAQ,iB;MACR,0BAAgB,I;MACpB,W;K;G;EALO,yE;IAAA,oB;MACS,IAAqB,I;MAArC,gBAAgB,QAAqB,OAAnB,CAAY,OAAO,MAArB,kC;MAChB,8BAAS,4DAAT,C;MAIA,yBAAM,UAAS,SAAT,C;MACV,W;K;G;EAjBE,oE;IAAA,4B;MACF,qBAAW,yBAAM,S;MACjB,kBAAQ,yBAAM,Y;MACd,sBAAY,yBAAM,U;MAClB,iBAAO,yBAAM,K;MACb,eAAK,yBAAM,G;MACX,uBAAa,IAAK,OAAuC,WAAjC,wCAAe,yBAAM,KAArB,aAAiC,CAAvC,C;MAClB,oBAAU,yBAAM,Q;MAChB,kBAAQ,yBAAM,M;MACd,kBAAQ,yBAAM,M;MACd,qBAAW,+D;MAQf,W;K;G;EAGc,iE;IACF,kBAAQ,Q;IACZ,W;G;EAHK,0D;IACL,wBAAM,4CAAN,C;IAGA,4BAAC,QAAD,C;IACJ,W;G;EAIU,yE;IAAA,4B;MACF,kBAAQ,U;MACZ,W;K;G;EAHK,kE;IAAA,4B;MACL,wBAAM,+DAAN,C;MAGA,4BAAC,UAAD,C;MACJ,W;K;G;EAlCD,6D;IAAA,4B;MACH,wBAAM,0DAAN,C;MAmBA,IAAI,yBAAM,aAAV,C;QACI,6DAAS,qCAAT,C;;M9GmuDI,Q;MAAA,O8G5tDR,yBAAM,Q9G4tDE,W;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;Q8G3tDJ,6DAAS,6C9G2tDQ,O8G3tDR,CAAT,C;;MAOR,W;K;G;2CA9CJ,qB;IAEI,IAAI,QAAA,UAAM,QAAN,EAAiB,SAAjB,KAA8B,QAAA,UAAM,MAAN,EAAe,SAAf,CAAlC,C;MACI,+DAAW,kCAAX,C;;IAOJ,2DAAO,oCAAP,C;G;EA4CgE,kD;IAE5D,IAAI,KAAM,YAAN,IAAqB,CAAC,KAAM,cAAhC,C;MACI,cAAkB,OAAA,KAAM,aAAN,EAAsB,SAAtB,CAAJ,GAAmD,QAAd,KAAM,QAAQ,CAAnD,GAAgE,KAAM,a;;IAExF,sBAAsB,K;IACtB,oBAAoB,K;IACxB,W;G;0CAZJ,qB;IACI,wBAAc,I;IACd,0BAAgB,K;IAGS,iCAAzB,4BAAgE,0B;G;;EAcnC,uD;IAAA,4B;MACzB,wBAAM,eAAN,C;MACJ,W;K;G;EAHiB,gD;IAAA,4B;MACjB,mDAA6B,6CAA7B,C;MAGJ,W;K;G;EANJ,iC;IAEI,OAAO,4BAAc,8BAAd,E;G;EjGw6BP,gC;IACE,OAAO,IAAI,QAAJ,CAAa,IAAI,SAAjB,EAA4B,EAA5B,C;G;ECmRT,uC;IACE,OAAO,c;MACL,OAAO,IAAI,UAAJ,CAAa,eAAe,CAAC,OAAD,EAAU,eAAV,CAA5B,EAAwD,EAAxD,C;K;G;EiGzwCf,0B;;G;EAMkB,kE;IAAA,4B;MACE,4BAAC,yBAAM,MAAP,C;MACJ,W;K;G;EAgByB,2F;IAAA,4B;MAAW,Q;MAAT,mBAAS,2D;MAAuB,W;K;G;EAElC,6F;IAAA,4B;MAAU,Q;MAAR,kBAAQ,iE;MAAgB,W;K;G;EAJhC,uF;IAAA,8B;MACP,IAAI,yBAAM,MAAV,C;QACI,8BAAS,yEAAT,C;;QAEA,8BAAS,2EAAT,C;;MAGJ,IAAI,QAAA,yBAAM,SAAN,EAAkB,SAAlB,CAAJ,C;QACI,yBAAM,UAAS,QAAT,C;;MAEd,W;K;G;EAhBE,gF;IAAA,4B;MAGM,Q;MAFR,gBAAM,yBAAM,I;MACZ,gBAAM,yBAAM,I;MACJ,IAAI,yBAAM,MAAV,C;QAAyB,OAAN,yBAAM,O;;QAAsB,OAAN,yBAAM,M;;MAAvD,sB;MACA,kBAAQ,yBAAM,M;MACd,8BAAoB,M;MACpB,qBAAW,6E;MAWf,W;K;G;EAlBG,yE;IAAA,4B;MACH,wBAAM,sEAAN,C;MAkBJ,W;K;G;2CAhCZ,qB;IjG6wCE,IAAI,cAAc,WAAW,UAAU,eAAe,CAAC,YAAU,CADrD,IACqD,CAAX,C;IiG1wChD,IAAI,QAAA,UAAM,MAAN,EAAe,SAAf,CAAJ,C;MjG2wCA,WiG1wCI,oCAAE,yCAAF,C;;IlGi/BV,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;IkG3+B7C,YlG4+BR,aApsBS,IkGxSD,EAAU,MAAV,C;IlG4+BR,akGz+BI,kDAAO,gDAAP,C;IjGiwCJ,WDvRG,cAAc,CAAC,aAAW,OAAO,EAAnB,C;ICwRd,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;G;EiGtuC2C,kD;IAE5D,IAAI,KAAM,YAAV,C;MACI,IAAI,KAAM,MAAV,C;QACI,eAAe,KAAM,c;;QAErB,cAAc,KAAM,a;;;IAG5B,oBAAoB,K;IACxB,W;G;0CAdJ,qB;IACI,wBAAc,I;IAGW,iCAAzB,4BAAgE,0B;G;;EAiBnC,uD;IAAA,4B;MACzB,wBAAM,eAAN,C;MACJ,W;K;G;EAHiB,gD;IAAA,4B;MACjB,mDAA6B,6CAA7B,C;MAGJ,W;K;G;EANJ,iC;IAEI,OAAO,4BAAc,8BAAd,E;G;EC7DX,6B;;G;EAqB6B,gF;IAAA,4B;MACL,0BAAgB,I;MAChB,kBAAQ,gB;MACZ,W;K;G;EARO,+E;IAAA,wB;MACS,IAAM,I;MAAtB,eAAkD,CAAlC,cAAM,OAAN,KAAM,OAAN,uCAAkC,O;MAClD,IAAI,QAAA,4BAAM,SAAN,EAAkB,SAAlB,CAAJ,C;QACI,4BAAM,UAAS,QAAT,C;;MAEV,iCAAS,8DAAT,C;MAIJ,W;K;G;EApBE,wE;IAAA,4B;MACF,sBAAY,4BAAM,U;MAClB,kBAAQ,4BAAM,M;MACd,iBAAO,4BAAM,K;MACb,kBAAQ,4BAAM,M;MACd,iBAAO,4BAAM,K;MACb,oBAAU,4BAAM,Q;MAChB,kBAAQ,4BAAM,M;MACd,yBAAe,K;MACf,qBAAW,I;MACX,qBAAW,4BAAM,S;MACjB,qBAAW,qE;MAUf,W;K;G;EAtBM,iE;IAAA,4B;MACN,wBAAM,8DAAN,C;MAsBJ,W;K;G;8CAzBJ,qB;IAEI,8DAAU,qCAAV,C;G;EA+BmE,qD;IAE/D,IAAI,KAAM,YAAN,IAAqB,CAAC,KAAM,cAAhC,C;MACI,cAAc,KAAM,a;;IAExB,sBAAsB,K;IACtB,oBAAoB,K;IACxB,W;G;6CAZJ,qB;IACI,wBAAc,I;IACd,0BAAgB,K;IAGY,oCAA5B,4BAAmE,6B;G;;EAcnC,0D;IAAA,4B;MAC5B,wBAAM,eAAN,C;MACJ,W;K;G;EAHiB,mD;IAAA,4B;MACjB,sDAAgC,gDAAhC,C;MAGJ,W;K;G;EANJ,oC;IAEI,OAAO,4BAAc,iCAAd,E;G;EnGq8BP,gC;IACE,OAAO,IAAI,QAAJ,CAAa,IAAI,SAAjB,EAA4B,EAA5B,C;G;ECgjCT,mC;IACE,OAAO,c;MACL,OAAO,IAAI,QAAJ,CAAW,eAAe,CAAC,OAAD,EAAU,eAAV,CAA1B,EAAsD,EAAtD,C;K;G;EmGzjEf,yB;;G;EAO0B,qE;IACF,oBAAU,I;IACV,eAAK,Y;IACL,sBAAY,K;IAChB,W;G;EALO,uE;IAAA,4B;MACP,wBAAM,gDAAN,C;MAKA,4BAAC,wBAAM,MAAP,C;MACJ,W;K;G;EAmBkC,0G;IAAA,wB;MAAW,wBAAM,SAAQ,KAAR,C;MAAe,W;K;G;EAHxC,mG;IAAA,4B;MACF,iBAAO,O;MACP,kBAAQ,O;MACR,oBAAU,gG;MACd,W;K;G;EACqC,mG;IAAE,W;G;EAAZ,4F;IAAE,yDAAQ,8EAAR,C;IAAY,W;G;EANlC,4F;IAAA,4B;MACP,wBAAM,yFAAN,C;MAKA,wBAAM,4BAAqB,uEAArB,EAAN,C;MACJ,W;K;G;EATI,qF;IAAA,4B;MACJ,wBAAc,O;MACd,+DAAW,kFAAX,C;MAQJ,W;K;G;EAckB,4G;IAAA,qB;MACN,UAAU,oB;MACV,iBAAa,EAAb,C;MACmB,gBAAnB,wBAAM,a;M1Dopa1B,Q;MAAhB,wBAAgB,SAAhB,gB;QAAgB,cAAA,SAAhB,M;Q0Dnpa4C,mBAAO,QAAP,C;QACJ,WAAS,G;QACL,mB1Dipaf,O0DjpayB,MAAV,C;;MAGR,GAAI,gBAAO,KAAP,C;MjHkuDxB,U;MAAA,SiHjuDoB,wBAAM,SjHiuD1B,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,6B;QiHhuDwB,WAAS,E;Q1D4oajC,U;QAAhB,4BvD56W6B,SuD46W7B,kB;UAAgB,gBvD56Wa,SuD46W7B,Q;U0D1oagD,mBAAO,QAAP,C;UACJ,WAAS,G;UACL,mB1DwoanB,S0DxoamB,C;;QAGJ,mBAAO,KAAP,C;;MAER,gBAAc,QAAS,eAAc,GAAd,C;MAEvB,SAAQ,cAAa,MAAb,EAAqB,iCAA8B,GAAnD,C;MACR,SAAQ,cAAa,UAAb,EAA4B,wBAAM,MAAT,SAAzB,C;MACR,SAAQ,cAAa,SAAb,EAAwB,MAAxB,C;MACR,cAAA,QAAS,KAAT,CAAgB,aAAY,SAAZ,C;MACR,SAAY,Q;MACpB,cAAA,QAAS,KAAT,CAAgB,aAAY,SAAZ,C;MACpB,W;K;G;EACwC,wG;IAAE,W;G;EAAf,mG;IAAE,4DAAW,mFAAX,C;IAAe,W;G;EAhC1C,4G;IAAA,4B;MACF,iBAAO,O;MACP,kBAAQ,e;MACR,oBAAU,kG;MA6BV,oBAAM,4BAAqB,8EAArB,EAAN,C;MACJ,W;K;G;EAlCO,8F;IAAA,4B;MACP,wBAAM,sGAAN,C;MAkCJ,W;K;G;EArCI,uF;IAAA,4B;MACJ,wBAAc,iB;MACd,+DAAW,oFAAX,C;MAoCJ,W;K;G;EAasB,4G;IAAA,wB;MAAW,wBAAM,WAAU,KAAV,C;MAAiB,W;K;G;EAH1C,qG;IAAA,4B;MACF,iBAAO,O;MACP,kBAAQ,S;MACR,oBAAU,kG;MACd,W;K;G;EACuC,mG;IAAE,W;G;EAAd,4F;IAAE,2DAAU,8EAAV,C;IAAc,W;G;EANpC,8F;IAAA,4B;MACP,wBAAM,2FAAN,C;MAKA,wBAAM,4BAAqB,uEAArB,EAAN,C;MACJ,W;K;G;EATI,uF;IAAA,4B;MACJ,wBAAc,S;MACd,+DAAW,oFAAX,C;MAQJ,W;K;G;EA9FJ,gE;IAAA,4B;MACJ,+DAAW,6DAAX,C;MpGogCV,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;MoG3/BvC,6C;MpGwTf,kBAosBC,WApsBS,I;MoGtTG,4BAAa,yBAAgB,KAA7B,C;MACA,6BAAgB,OAAF,CAAE,CAAhB,C;MAEJ,IAAI,QAAA,0BAAM,QAAN,EAAiB,SAAjB,CAAJ,C;QpGs/Bd,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;QAnsBtD,kBAosBC,aApsBS,I;QoGhTW,4BAAe,OAAF,CAAE,CAAf,C;QACA,kC;QpGm/BpB,aoGj/BgB,mDAAQ,6EAAR,C;QpGi/BhB,WACG,cAAc,CAAC,aAAW,OAAO,EAAnB,C;;MAFvB,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;MAnsBtD,kBAosBC,aApsBS,I;MoG9RO,4BAAe,OAAF,CAAE,CAAf,C;MACA,kC;MpGi+BhB,aoG/9BY,mDAAQ,+EAAR,C;MpG+9BZ,WACG,cAAc,CAAC,aAAW,OAAO,EAAnB,C;MAFvB,IAAI,gBAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;MAnsBtD,kBAosBC,aApsBS,I;MoGjPO,4BAAe,OAAF,CAAE,CAAf,C;MACA,kC;MpGo7BhB,aoGl7BY,mDAAQ,+EAAR,C;MpGk7BZ,WACG,cAAc,CAAC,aAAW,OAAO,EAAnB,C;MAAd,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;MoGt6BjB,W;K;G;EA4BsC,0G;IACF,kBAAQ,Q;IACZ,W;G;EAJM,oG;IAAA,4B;MACN,gBAAM,UAAG,M;MACT,wBAAM,qFAAN,C;MAGA,4BAAC,UAAG,WAAJ,C;MACJ,W;K;G;EARC,8F;IAAA,4B;MACc,kBAAnB,wBAAM,a;M1D0katB,Q;MAAhB,wBAAgB,WAAhB,gB;QAAgB,cAAA,WAAhB,M;Q0DzkaoC,8DAAU,+E1DykajB,O0DzkaiB,CAAV,C;;MAQR,W;K;G;EAXM,uF;IAAA,4B;MACN,6DAAS,oFAAT,C;MAWJ,W;K;G;EAQ0B,+H;IAAA,oB;MAAO,wBAAM,gBAAe,UAAf,C;MAAmB,W;K;G;EAHxC,wH;IAAA,4B;MACF,kBAAQ,I;MACR,qBAAW,K;MACX,oBAAU,qH;MACd,W;K;G;EAEc,2G;IAAA,4B;MACN,wBAAc,Q;MACd,4BAAC,UAAD,C;MACJ,W;K;G;EAXC,iH;IAAA,4B;MACL,gBAAS,eAAH,UAAG,EAAa,EAAb,C;MACT,wBAAM,8GAAN,C;MAKG,kBAAH,U;M1DsjapB,Q;MAAhB,wBAAgB,WAAhB,gB;QAAgB,cAAA,WAAhB,M;Q0DrjawC,8DAAU,sF1DqjarB,O0DrjaqB,CAAV,C;;MAKR,W;K;G;EAfE,uF;IAAA,4B;MACyC,kBAA/C,wBAAM,SAAS,iBAAQ,gCAAR,EAAqB,8BAArB,C;MjHkpD3B,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QiHlpDmE,6C;QACnD,6DAAS,wEjHipDZ,OiHjpDY,uBAAT,C;;MAeR,W;K;G;EA/BE,gF;IAAA,4B;MACF,8DAAU,6EAAV,C;MAaA,8DAAU,6EAAV,C;MAkBJ,W;K;G;EA/CO,yE;IAAA,4B;MACX,IAAI,wBAAM,SAAS,UAAnB,C;QpG45Bd,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;QAnsBtD,kBAosBC,WApsBS,I;QoGtNW,4BAAa,4CAAb,C;QACA,gCAAiB,OAAjB,C;QACA,4BAAa,eAAW,MAAX,CAAb,C;QACA,4C;QACA,wBAAY,QAAH,EAAG,CAAZ,C;QnG08D1B,IAAI,gBAAc,WAAW,UAAU,eAAe,CAAC,QAAQ,CADnD,IACmD,CAAT,C;QAChD,amGx8DoB,mBAAC,4BAAD,C;QpGm5BpB,WCsjCG,cAAc,CAAC,aAAW,OAAO,EAAnB,C;QDrjCd,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;;QoGh5BL,0DAAM,sEAAN,C;;MAkCR,W;K;G;EAWiB,oF;IAAA,4B;MACL,iBAAO,e;MACX,W;K;G;EAHW,gF;IAAA,6B;MACX,6BAAS,kEAAT,C;MAGJ,W;K;G;EAEa,kF;IAAA,4B;MACS,IAAyB,I;MAAvC,wBAAc,QAAyB,OAAzB,aAAa,OAAY,MAAzB,kC;MACd,iBAAO,C;MACX,W;K;G;EAJkB,gF;IAAA,wB;MAClB,6BAAS,gEAAT,C;MAIJ,W;K;G;EAjBE,yE;IAAA,4B;MACF,+BAAqB,CAAQ,CAAR,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,C;MACrB,sBAAY,K;MACZ,kBAAQ,wBAAM,SAAS,K;MACvB,wBAAc,wBAAM,Y;MACpB,iBAAO,wBAAM,K;MACb,6BAAmB,O;MACnB,yBAAe,sE;MAKf,gCAAsB,sE;MAM1B,W;K;G;EAnBY,kE;IAAA,4B;MACZ,wBAAM,+DAAN,C;MAmBJ,W;K;G;EAhLE,yD;IAAA,4B;MACF,4DAAQ,sDAAR,C;MpGqgCN,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;MoGn6B3C,6C;MpGgOX,kBAosBC,WApsBS,I;MoG9ND,wBAAa,OAAJ,GAAI,CAAb,C;MACA,6BAAgB,OAAF,CAAE,CAAhB,C;MACA,8BAAiB,OAAF,CAAE,CAAjB,C;MpGg6BR,WoG95BI,0DAAe,iEAAf,C;MpG+5BD,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;MoG52BjB,oEAAgB,wDAAhB,C;MAqBJ,W;K;G;0CAnLJ,qB;IAEI,0DAAM,iCAAN,C;G;sCAoLJ,Y;IAGW,Q;IAFP,cAAc,qBAAc,UAAM,YAApB,I;IACd,eAAe,UAAM,SAAS,K;IACvB,IAAI,WAAW,QAAf,C;MACH,e;;MAEA,c;;IAHJ,W;G;wCAOJ,Y;IAGW,Q;IAFP,gBAAgB,YAAA,UAAM,YAAN,EAAqB,UAAM,KAA3B,C;IAChB,eAAe,UAAM,SAAS,K;IACvB,IAAI,aAAa,QAAjB,C;MACH,e;;MAEA,IAAI,YAAY,CAAhB,C;QACI,Q;;QAEA,gB;;;IANR,W;G;yCAWJ,qB;IACI,iBAAO,C;IACP,wBAAc,E;G;;EAOc,sD;IAAA,4B;MACxB,SAAK,eAAM,eAAN,C;MACT,W;K;G;EAHiB,+C;IAAA,4B;MACjB,kDAA4B,4CAA5B,C;MAGJ,W;K;G;EANJ,gC;IAEI,OAAO,4BAAc,6BAAd,E;G;ECnPmB,oF;IAU1B,oB;MAAA,OACmB,Q;IAEnB,oB;MAAA,OACgB,C;IAEhB,yB;MAAA,YACyB,K;IAhBzB,kB;IAGA,4B;IAGA,8B;IAGA,gB;IAGA,gB;IAGA,0B;G;;6CAhBJ,Y;IACI,iB;G;6CADJ,Y;IAII,sB;G;6CAJJ,Y;IAOI,uB;G;6CAPJ,Y;IAUI,gB;G;6CAVJ,Y;IAaI,gB;G;6CAbJ,Y;IAgBI,qB;G;+CAhBJ,iE;IAAA,+BACI,qCADJ,EAII,oDAJJ,EAOI,uDAPJ,EAUI,kCAVJ,EAaI,kCAbJ,EAgBI,iDAhBJ,C;G;2CAAA,Y;IAAA,OACI,0DADJ,IAII,kDAJJ,KAOI,oDAPJ,KAUI,sCAVJ,KAaI,sCAbJ,KAgBI,gDAhBJ,O;G;2CAAA,Y;IAAA,c;IACI,sD;IAGA,2D;IAGA,4D;IAGA,qD;IAGA,qD;IAGA,0D;IAhBJ,a;G;yCAAA,iB;IAAA,4IACI,sCADJ,IAII,gDAJJ,IAOI,kDAPJ,IAUI,oCAVJ,IAaI,oCAbJ,IAgBI,8CAhBJ,I;G;;;;;;;ECA4B,qD;IAAC,wB;IAAmC,sB;IAAyC,kB;G;;2CAAzG,Y;IAA6B,oB;G;2CAA7B,Y;IAAgE,mB;G;2CAAhE,Y;IAAyG,iB;G;6CAAzG,oC;IAAA,6BAA6B,8CAA7B,EAAgE,2CAAhE,EAAyG,qCAAzG,C;G;yCAAA,Y;IAAA,OAA6B,8DAA7B,IAAgE,4CAAhE,KAAyG,wCAAzG,O;G;yCAAA,Y;IAAA,c;IAA6B,yD;IAAmC,wD;IAAyC,sD;IAAzG,a;G;uCAAA,iB;IAAA,4IAA6B,4CAA7B,IAAgE,0CAAhE,IAAyG,sCAAzG,I;G;ECsBA,qB;;G;EAcoD,wD;IAAA,2B;MAEhC,oBAAM,mCAAkC,QAAlC,C;MACV,W;K;G;EAJoB,qE;IAAA,4B;MAiBH,IAET,IAFS,EAGW,MAHX,EAGA,MAHA,EAMW,MANX,EAMA,MANA,EAST,MATS,EAaW,MAbX,EAaA,M;MA7BjB,8CAAoC,8C;MAIpC,uCAA6B,oBAAM,2B;MACnC,+BAAqB,oBAAM,mB;MAC3B,2BAAiB,kB;MACjB,uBAAa,oBAAM,W;MACnB,iCAAuB,K;MACvB,iCAAuB,I;MACvB,+BAAqB,I;MACrB,+BAAqB,I;MACrB,+BAAqB,I;MACrB,+BAAqB,I;MACrB,qBAAW,oBAAM,S;MACjB,qBAAW,kBAAW,S;MACtB,QAAM,kBAAW,SAAjB,M;aACI,c;UACI,gF;UACA,mBAAS,WAAW,SAAX,kBAAW,oBAAX,8E;UACT,mBAAS,kBAAW,oBAAoB,O;UACxC,mBAAS,kBAAW,oBAAoB,O;UACxC,mBAAS,WAAW,SAAX,kBAAW,oBAAX,8E;UALb,K;aAOA,W;UACI,oF;UACA,4C;UACA,mBAAS,kBAAW,oBAAoB,O;UACxC,mBAAS,kBAAW,oBAAoB,O;UACxC,mBAAS,WAAW,SAAX,kBAAW,oBAAX,8E;UALb,K;aAOA,c;UlGhDgB,MAAM,8B;akGiDtB,W;UlGjDgB,MAAM,8B;;MkGmD9B,W;K;G;EAW0B,mD;IAAA,4B;MAClB,uCAA6B,oBAAM,2B;MACnC,+BAAqB,oBAAM,mB;MAC3B,wBAAc,oBAAM,eAAe,KAAK,Q;MACxC,uBAAa,oBAAM,W;MACnB,qBAAW,oBAAM,S;MACrB,W;K;G;EAGkB,mD;IAAA,4B;MACd,uCAA6B,oBAAM,2B;MACnC,+BAAqB,oBAAM,mB;MAC3B,wBAAc,oBAAM,eAAe,KAAK,Q;MACxC,uBAAa,oBAAM,W;MACnB,qBAAW,oBAAM,S;MACjB,mBAAS,oBAAM,O;MACnB,W;K;G;sCAnEZ,qB;IAEI,iBACiB,UAAM,e;IACvB,wBACI,wBAAwB,yCAAxB,CADJ,C;IA6CA,QAAM,UAAM,SAAZ,M;WACI,c;QAAyB,wBACrB,sBAAsB,+BAAtB,CADqB,C;QAAzB,K;WASA,W;QAAsB,wBAClB,kBAAkB,+BAAlB,CADkB,C;QAAtB,K;WAUA,c;QlGhFwB,MAAM,8B;WkGiF9B,W;QlGjFwB,MAAM,8B;;G;;EkGwFV,kD;IAAA,4B;MACpB,SAAK,eAAM,eAAN,C;MACT,W;K;G;EAHiB,2C;IAAA,4B;MACjB,8CAAwB,wCAAxB,C;MAGJ,W;K;G;EALJ,4B;IACI,OAAO,4BAAc,yBAAd,E;G;EvGu7BP,gC;IACE,OAAO,IAAI,QAAJ,CAAa,IAAI,SAAjB,EAA4B,EAA5B,C;G;EwGthC6B,2B;IAAC,W;G;;EAM3C,iC;IAQ8B,wB;G;EAcJ,sE;IACF,sBAAY,I;IACZ,oBAAU,C;IACd,W;G;EAGU,6E;IACF,iBAAO,I;IACP,eAAK,E;IACL,eAAK,C;IACT,W;G;EAWiC,oH;IAAA,4B;MACL,kBAAQ,oB;MACZ,W;K;G;EALW,wK;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;G;;;;+GAAA,Y;;;;;YACI,gB;4BAAA,oD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAnB,mBAAmB,a;YACnB,IAAI,oBAAJ,C;cADA,OAEI,gDAAS,kGAAT,CAFJ,M;;cACA,gB;;;;;YAKJ,W;;;;;;;;;;;;;;;G;EAPmB,qH;IAAA,yD;qBAAA,4J;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADX,4G;IAAA,qB;MACI,OAAZ,WAAY,kBAAO,yGAAP,C;MAQhB,W;K;G;EAMqB,kI;IAAA,4B;MACL,sBAAa,WACT,sBACe,cADf,EAEc,iBAFd,EAGY,yBAAsB,gBAHlC,CADS,C;MAOjB,W;K;G;EAZW,wL;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oC;IAAA,oE;IAAA,4B;G;;;;iHAAA,Y;;;;;kCACG,QAAH,qBAAG,C;YACL,gB;4BAAA,6DAA0B,mBAA1B,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAb,aAAa,a;YACT,yB;YAAA,S;cAAyB,OtG4Jb,CsG5JM,MtG4JL,U;;;YsG5JjB,S;cAFA,OAGI,gDAAS,mHAAT,CAHJ,M;;cAAA,OAaI,2CAAM,qHAbV,M;;;;;;;;;;;;;;;;;;;G;EADe,qI;IAAA,yD;qBAAA,4K;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADN,8G;IAAA,qB;MACD,OAAZ,WAAY,kBAAO,+GAAP,C;MAiBhB,W;K;G;EAhCE,4G;IAAA,4B;MACF,iBAAW,gCAAM,M;MACjB,qBAAe,W;MACf,cAAQ,O;MACR,kBAAY,kG;MAUZ,uBAAiB,oG;MAmBrB,W;K;G;EAlCU,uG;IAAA,4B;MACV,oBAAM,sGAAN,C;MAkCJ,W;K;G;EA1CH,yF;IAAA,4B;MACD,wBAAM,wDAAN,C;MAKA,wBACI,cAAc,iGAAd,CADJ,C;MAsCJ,W;K;G;EAGU,+E;IACF,iBAAO,I;IACP,eAAK,E;IACL,eAAK,C;IACT,W;G;EAWiC,sH;IAAA,4B;MACL,kBAAQ,oB;MACZ,W;K;G;EALW,0K;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;G;;;;iHAAA,Y;;;;;YACI,gB;4BAAA,oD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAnB,mBAAmB,a;YACnB,IAAI,oBAAJ,C;cADA,OAEI,gDAAS,oGAAT,CAFJ,M;;cACA,gB;;;;;YAKJ,W;;;;;;;;;;;;;;;G;EAPmB,uH;IAAA,yD;qBAAA,8J;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADX,8G;IAAA,qB;MACI,OAAZ,WAAY,kBAAO,2GAAP,C;MAQhB,W;K;G;EAOqB,uI;IAAA,4B;MACL,sBAAa,WACT,sBACe,qBADf,EAEc,iBAFd,EAGY,yBAAsB,gBAHlC,CADS,C;MAOjB,W;K;G;EAKS,uI;IAAA,4B;MACL,sBAAa,WACT,sBACe,qBADf,EAEc,iBAFd,EAGY,yBAAsB,gBAHlC,CADS,C;MAOjB,W;K;G;EA1BW,wL;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oC;IAAA,oE;IAAA,4B;IAAA,+B;G;;;;iHAAA,Y;;;;;kCACG,QAAH,qBAAG,C;YACA,gB;4BAAA,qEAA0B,mBAA1B,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;yCAAA,a;YACA,gB;4BAAA,6DAA0B,mBAA1B,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAlB,sBAAkB,aAAlB,C;YACI,2C;YAAA,S;cAAmC,OtG6GvB,CsG7GW,wBtG6GV,U;;;YsG7GjB,S;cACI,gDAAS,mIAAT,C;;cAUA,2CAAM,qH;;;YAEN,kC;YAAA,W;cAAmC,StGgGvB,CsGhGW,atGgGV,U;;;YsGhGjB,W;cAhBA,OAiBI,gDAAS,wHAAT,CAjBJ,M;;cAAA,OA2BI,2CAAM,2HA3BV,M;;;;;;;;;;;;;;;;;;;G;EADe,qI;IAAA,yD;qBAAA,4K;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADN,8G;IAAA,qB;MACD,OAAZ,WAAY,kBAAO,+GAAP,C;MA+BhB,W;K;G;EA9CE,8G;IAAA,4B;MACF,iBAAW,gCAAM,M;MACjB,qBAAe,W;MACf,cAAQ,O;MACR,kBAAY,oG;MAUZ,uBAAiB,oG;MAiCrB,W;K;G;EAhDU,uG;IAAA,4B;MACV,oBAAM,wGAAN,C;MAgDJ,W;K;G;EAxDH,yF;IAAA,4B;MACD,wBAAM,0DAAN,C;MAKA,wBACI,cAAc,iGAAd,CADJ,C;MAoDJ,W;K;G;EAGU,+E;IACF,iBAAO,I;IACP,eAAK,E;IACL,eAAK,C;IACT,W;G;EAWiC,0H;IAAA,4B;MACL,sBAAY,wB;MAChB,W;K;G;EALW,0K;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;G;;;;iHAAA,Y;;;;;YACQ,gB;4BAAA,wD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,uBAAuB,a;YACvB,IAAI,wBAAJ,C;cADA,OAEI,gDAAS,wGAAT,CAFJ,M;;cACA,gB;;;;;YAKJ,W;;;;;;;;;;;;;;;G;EAPmB,uH;IAAA,yD;qBAAA,8J;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADX,8G;IAAA,qB;MACI,OAAZ,WAAY,kBAAO,2GAAP,C;MAQhB,W;K;G;EAMqB,2I;IAAA,4B;MACL,sBAAa,WACT,sBACe,qBADf,EAEc,iBAFd,EAGY,8BAA2B,oBAHvC,CADS,C;MAOjB,W;K;G;EAZW,wL;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oC;IAAA,oE;IAAA,gC;G;;;;iHAAA,Y;;;;;sCACO,QAAH,qBAAG,C;YACJ,gB;4BAAA,qEAA8B,uBAA9B,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAlB,sBAAkB,aAAlB,C;YACI,gC;YAAA,S;cAAmC,OtGkDvB,CsGlDW,atGkDV,U;;;YsGlDjB,S;cAFA,OAGI,gDAAS,4HAAT,CAHJ,M;;cAAA,OAaI,2CAAM,2HAbV,M;;;;;;;;;;;;;;;;;;;G;EADe,qI;IAAA,yD;qBAAA,4K;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADN,8G;IAAA,qB;MACD,OAAZ,WAAY,kBAAO,+GAAP,C;MAiBhB,W;K;G;EAhCE,8G;IAAA,4B;MACF,iBAAW,gCAAM,U;MACjB,qBAAe,e;MACf,cAAQ,O;MACR,kBAAY,oG;MAUZ,uBAAiB,oG;MAmBrB,W;K;G;EAlCU,uG;IAAA,4B;MACV,oBAAM,wGAAN,C;MAkCJ,W;K;G;EA1CH,yF;IAAA,4B;MACD,wBAAM,0DAAN,C;MAKA,wBACI,cAAc,iGAAd,CADJ,C;MAsCJ,W;K;G;EA5JC,gF;IAAA,4B;MACD,wBAAM,iDAAN,C;MAKA,yDAAK,+EAAL,C;MA8CA,yDAAK,+EAAL,C;MA4DA,yDAAK,+EAAL,C;MA6CJ,W;K;G;EAIM,wE;IACF,sBAAY,I;IACZ,oBAAU,C;IACd,W;G;EAGU,+E;IACF,iBAAO,I;IACP,eAAK,E;IACL,eAAK,C;IACT,W;G;EAWiC,4H;IAAA,4B;MACL,wBAAc,0B;MAClB,W;K;G;EALW,0K;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;G;;;;iHAAA,Y;;;;;YACU,gB;4BAAA,kF;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAzB,yBAAyB,a;YACzB,IAAI,0BAAJ,C;cADA,OAEI,gDAAS,0GAAT,CAFJ,M;;cACA,gB;;;;;YAKJ,W;;;;;;;;;;;;;;;G;EAPmB,uH;IAAA,yD;qBAAA,8J;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADX,8G;IAAA,qB;MACI,OAAZ,WAAY,kBAAO,2GAAP,C;MAQhB,W;K;G;EACiB,8G;IAAA,qB;MACb,gCAAM,kI;MACV,W;K;G;EAhBE,8G;IAAA,4B;MACF,iBAAW,gCAAM,Y;MACjB,qBAAe,iB;MACf,cAAQ,uB;MACR,kBAAY,oG;MAUZ,uBAAiB,oG;MAGrB,W;K;G;EAlBU,uG;IAAA,4B;MACV,oBAAM,wGAAN,C;MAkBJ,W;K;G;EA1BH,yF;IAAA,4B;MACD,wBAAM,0DAAN,C;MAKA,wBACI,cAAc,iGAAd,CADJ,C;MAsBJ,W;K;G;EAGU,+E;IACF,iBAAO,I;IACP,eAAK,E;IACL,eAAK,C;IACT,W;G;EAWiC,4H;IAAA,4B;MACL,wBAAc,0B;MAClB,W;K;G;EALW,0K;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;G;;;;iHAAA,Y;;;;;YACU,gB;4BAAA,kF;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAzB,yBAAyB,a;YACzB,IAAI,0BAAJ,C;cADA,OAEI,gDAAS,0GAAT,CAFJ,M;;cACA,gB;;;;;YAKJ,W;;;;;;;;;;;;;;;G;EAPmB,uH;IAAA,yD;qBAAA,8J;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EADX,8G;IAAA,qB;MACI,OAAZ,WAAY,kBAAO,2GAAP,C;MAQhB,W;K;G;EACiB,8G;IAAA,qB;MACb,gCAAM,kI;MACV,W;K;G;EAhBE,8G;IAAA,4B;MACF,iBAAW,gCAAM,Y;MACjB,qBAAe,iB;MACf,cAAQ,uB;MACR,kBAAY,oG;MAUZ,uBAAiB,oG;MAGrB,W;K;G;EAlBU,uG;IAAA,4B;MACV,oBAAM,wGAAN,C;MAkBJ,W;K;G;EA1BH,yF;IAAA,4B;MACD,wBAAM,0DAAN,C;MAKA,wBACI,cAAc,iGAAd,CADJ,C;MAsBJ,W;K;G;EAhEC,kF;IAAA,4B;MACD,wBAAM,mDAAN,C;MAKA,yDAAK,+EAAL,C;MA8BA,yDAAK,+EAAL,C;MA6BJ,W;K;G;EAIc,+E;IACF,sBAAY,I;IACZ,oBAAU,C;IACd,W;G;EAKc,uF;IAAA,4B;MACF,iBAAO,I;MACP,eAAK,U;MACL,eAAK,U;MACT,W;K;G;EAQyB,2H;IAAA,4B;MACL,sBAAa,cAAO,yBAAP,C;MACjB,W;K;G;EAHM,gJ;IAAA,qB;MACN,qCAAS,iHAAT,C;MAGJ,W;K;G;EARE,gJ;IAAA,4B;MACF,iBAAW,yBAAkB,S;MAC7B,qBAAe,yBAAkB,Q;MACjC,cAAQ,yBAAkB,M;MAC1B,gBAAU,sI;MAKd,W;K;G;EAVU,yI;IAAA,4B;MACV,oBAAM,0IAAN,C;MAUJ,W;K;G;EAlBH,wI;IAAA,4B;MACD,wBAAM,6EAAN,C;MAKA,wBACI,cAAc,mIAAd,CADJ,C;MAcJ,W;K;G;EA5BH,qG;IAAA,4B;MACD,wBAAM,0DAAN,C;MAIA,qBAAqB,4DAAyB,UAAzB,C;MACrB,aAAU,CAAV,MAAkB,cAAlB,M;QACI,wBAAwB,gCAAM,aAAN,aAAmB,CAAnB,C;QACxB,yDAAK,sHAAL,C;;MAsBR,W;K;G;kDA7QZ,qB;IACI,K;IxGwgCF,IAAI,cAAc,gBAAgB,UAAU,eAAe,CAAC,kBAAD,C;IAnsBtD,kBAosBC,WApsBS,I;IwGlUL,2BAAe,OAAH,EAAG,CAAf,C;IACA,8BAAkB,OAAH,EAAG,CAAlB,C;IACA,2BAAgB,OAAJ,GAAI,CAAhB,C;IAIJ,IAAI,UAAM,YAAV,C;MxGggCA,WwG//BI,gDAAK,gDAAL,C;;IxG+/BJ,WwG/1BA,gDAAK,kDAAL,C;IrHinDQ,Q;IAAA,OqH9iDR,iCAAoB,UAAM,aAAa,KAAvC,CrH8iDQ,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MalxBR,WwG3xBI,gDAAK,oDrH6iDY,OqH7iDZ,OAAL,C;;IxG4xBD,uBAAc,CAAC,WAAW,OAAO,EAAnB,C;G;EwGpvBT,6C;IAAE,sE;G;EA0BD,4M;IAAA,4B;MACL,IAAI,gCAAM,YAAN,IAAqB,8BAAzB,C;QACI,kBAAQ,sB;;MAEZ,IAAI,gCAAM,YAAN,IAAqB,8BAAzB,C;QACI,kBAAQ,sB;;MAEZ,IAAI,gCAAM,YAAN,IAAqB,kCAAzB,C;QACI,sBAAY,0B;;MAEhB,IAAI,kCAAJ,C;QACI,wBAAc,0B;;MAElB,IAAI,oCAAJ,C;QACI,wBAAc,4B;;MAEtB,W;K;G;EAlCe,4H;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oE;IAAA,gC;IAAA,gC;IAAA,oC;IAAA,sC;IAAA,sC;G;;;;mEAAA,Y;;;;;0CtG1Oe,W;0CAAA,W;8CAAA,W;gDAAA,W;YsG+OiB,gB;4BAAA,kF;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;4CAAA,a;YAC/C,IAAI,qCAAJ,C;cACyB,gB;8BAAA,kF;kBAAA,qC;uBAAA,mB;cAAA,Q;;cADzB,iB;;;;;YACI,kCAAqB,a;YACrB,IAAI,2CAA8B,2CAAM,YAAxC,C;cACmB,gB;8BAAA,oD;kBAAA,qC;uBAAA,mB;cAAA,Q;;cADnB,gB;;;;;YACI,4BAAe,a;YACf,IAAI,iCAAJ,C;cACmB,gB;8BAAA,oD;kBAAA,qC;uBAAA,mB;cAAA,Q;;cADnB,gB;;;;;YACI,4BAAe,a;YACf,IAAI,iCAAJ,C;cACuB,gB;8BAAA,wD;kBAAA,qC;uBAAA,mB;cAAA,Q;;cADvB,gB;;;;;YACI,gCAAmB,a;YADvB,gB;;;YAFJ,gB;;;YAFJ,gB;;;YAFJ,iB;;;YALA,OAiBA,gDAAS,4NAAT,CAjBA,M;;;;;;;;;;;;;;;G;EADe,2E;IAAA,yD;qBAAA,gH;UAAA,S;eAAA,Q;;eAAA,uB;K;G;iDAbvB,qB;IAKI,QAAO,cAAK,iCAAL,C;IACP,kBtGnOkC,W;IsGoOlC,kBtGpOkC,W;IsGqOlC,sBtGrOkC,W;IsGsOlC,wBtGtOkC,W;IsGuOlC,wBtGvOkC,W;IsGwOlC,yBtGhOgD,gB;IsGkOpC,OAAZ,WAAY,kBAAO,yCAAP,C;G;;EAyCwB,8D;IAAA,4B;MAChC,SAAK,eAAM,eAAN,C;MACT,W;K;G;EAHiB,uD;IAAA,4B;MACjB,0DAAoC,oDAApC,C;MAGJ,W;K;G;EALJ,wC;IACI,OAAO,4BAAc,qCAAd,E;G;EC9U+B,2B;IAAC,W;G;;EA6B3C,yB;;G;qCAEI,wB;IAEI,qBAAuB,OAAF,GAAW,iBAAI,SAAf,GAAoC,QAAV,iBAAI,MAAM,EAAQ,QAAR,EAAkB,UAAM,SAAS,WAAjC,C;IACzD,OAAO,2BAAY,cAAZ,sG;G;qCAGX,wB;IAEI,qBAAuB,OAAF,GAAW,iBAAI,SAAf,GAAoC,QAAV,iBAAI,MAAM,EAAQ,QAAR,EAAkB,UAAM,SAAS,WAAjC,C;IACzD,OAAO,2BAAY,cAAZ,sG;G;yCAGX,wB;IAEI,qBAAuB,OAAF,GAAW,iBAAI,SAAf,GAAwC,QAAd,iBAAI,UAAU,EAAQ,QAAR,EAAkB,UAAM,SAAS,WAAjC,C;IAC7D,OAAO,2BAAY,cAAZ,8G;G;mDAGX,4C;IAC2B,wB;MAAA,WAAoB,I;IAAM,wB;MAAA,WAAoB,I;IACrE,qBACM,OAAF,GAAW,iBAAI,SAAf,GAA0C,QAAhB,iBAAI,YAAY,EAAQ,QAAR,EAAkB,UAAM,SAAS,WAAjC,CAA1C,UACK,gBAAJ,GAAyB,oBAAO,SAAV,kBAAqB,QAArB,CAAtB,GAA0D,EAD3D,KAEI,gBAAJ,GAAyB,oBAAO,UAAV,kBAAsB,QAAtB,CAAtB,GAA2D,EAF3D,C;IAGJ,OAAO,2BAAY,cAAZ,gH;G;mDAGX,gD;IAC2B,wB;MAAA,WAAoB,I;IAAM,4B;MAAA,eAAwB,I;IACzE,qBACM,OAAF,GAAW,iBAAI,SAAf,GAA0C,QAAhB,iBAAI,YAAY,EAAQ,QAAR,EAAkB,UAAM,SAAS,WAAjC,CAA1C,UACK,gBAAJ,GAAyB,oBAAO,UAAV,kBAAsB,QAAtB,CAAtB,GAA2D,EAD5D,KAEI,oBAAJ,GAA6B,oBAAO,cAAV,kBAA0B,YAA1B,CAA1B,GAAuE,EAFvE,C;IAGJ,OAAO,2BAAY,cAAZ,4H;G;EAUK,wD;IAAA,mB;MAAE,iDAAuC,Y;K;G;EAEzC,8D;IAAA,mB;MAAE,mCAAyB,gB;K;G;EAQlB,8C;IAAE,gC;G;EAGF,uD;IAAA,mB;MAAE,gDAA8B,SAAE,QAAhC,oC;K;G;EAqCC,0D;IAAA,mB;MAAE,mCAAyB,Y;K;G;EAG3B,+E;IAAA,mB;MAAE,iDAAuC,YAAvC,UAA8C,mB;K;G;EA3D5E,iG;IAAA,wC;IAAA,0B;IAAA,kB;IAAA,wB;IAAA,0B;IAAA,gC;IAAA,kC;IAAA,wB;G;;;;uDAAA,Y;;;;;gBA6ByB,I;YAvBrB,QAAO,cAAK,iDAAL,C;YAEP,QAAO,cAAK,uDAAL,C;YACP,gBAAM,4BAA2B,IAA3B,C;;YAEe,gBAAjB,gBAAM,W;YlHkGW,kBAArB,6B;YkHjGQ,IpGrBZ,WoGqBY,sB;YpGpBL,WdKP,UAAiB,sBAAW,I;YArEe,gB;4BAAA,CAA7B,uBcgEP,WdhEO,YAA6B,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAqL3C,a;YkHlGyB,+B;;;;;;;;;YAGnB,8B;cACE,IAAI,OAAA,CAAE,QAAF,EAAa,eAAb,CAAJ,C;gBACI,QAAO,eAAM,kCAAN,C;gBACP,gBAAM,8H;;gBAEN,QAAO,eAAM,qCAAN,C;gBACP,OAAQ,KAAI,CAAJ,C;gBACR,gBAAM,6G;;cAEV,sB;;cAb8B,O;;;;;;YAgB9B,gBAAM,4BAA2B,KAA3B,C;;;;YAhBV,kC;YAkBO,IAAI,oBAAJ,C;cACH,IAAI,CAAa,OAAb,YAAa,OAAb,wBAAuB,wBAAe,GAAtC,QAAJ,C;gBACI,QAAM,eAAN,M;uBACI,M;oBACoE,iB;oCAAA,WAAb,YAAa,e;wBAAA,qC;6BAAA,mB;oBAAA,Q;uBAGpE,M;oBACoE,gB;oCAAA,WAAb,YAAa,e;wBAAA,qC;6BAAA,mB;oBAAA,Q;uBAGpE,U;oBAC0G,gB;oCAAA,WAAb,YAAa,e;wBAAA,qC;6BAAA,mB;oBAAA,Q;uBAG1G,W;oBAC+E,gB;oCAAA,WAAb,YAAa,e;wBAAA,qC;6BAAA,mB;oBAAA,Q;uBAG/E,iB;oBACqF,gB;oCAAA,WAAb,YAAa,e;wBAAA,qC;6BAAA,mB;oBAAA,Q;;;oBAlBzF,iB;;;;gBAuBwB,gB;gCAAA,WAAb,YAAa,e;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;cAY5B,wB;cArCG,iB;;;;;YAyBC,WAAwB,a;YACc,kBAAP,M;Y9GlEiB,U;Y8GkEhD,kBxBjDZ,qCtFjB4D,uBDhDrD,auFiEU,6BvFjEV,iDCgDqD,oCsFiB5D,EwBiDmE,IxBjDnE,C;YwBkDY,IAAI,gBAAe,oBAAnB,C;cACI,QAAO,cAAK,mDAAL,C;cACP,oBvGjEsB,W;;cuGmEtB,QAAO,cAAK,gEAAL,C;cACP,gBAAM,oBAAmB,WAAnB,4C;cACN,wB;;;YAhCR,iB;;;YAmB+D,kBAAP,M;YAAO,aAA8B,a;Y9G5DzC,U;Y8G4DxC,kBxB3CpB,qCtFjB4D,uBDhDrD,auFiEU,6BvFjEV,+HCgDqD,oCsFiB5D,EAAiD,MAAjD,C;Y9F46CO,kBAAM,iBAAa,wBsHh4CN,WtHg4CM,EAAwB,EAAxB,CAAb,C;YAuEA,U;YAAA,SsHv8CO,WtHu8CP,W;YAAb,OAAa,gBAAb,C;cAAa,wB;cACT,WAAY,WAAc,IsHx8CW,UtHw8CzB,C;;;YsHx8CgB,oBtHy8CzB,W;YsH38CS,iB;;;YAHiD,kBAAP,M;YAAO,eAA8B,a;Y9GxDnC,U;Y8GwDxC,kBxBvCpB,qCtFjB4D,uBDhDrD,auFiEU,6BvFjEV,yHCgDqD,oCsFiB5D,EAAiD,QAAjD,C;Y9F46CO,oBAAM,iBAAa,wBsHp4CN,WtHo4CM,EAAwB,EAAxB,CAAb,C;YAuEA,U;YAAA,SsH38CO,WtH28CP,W;YAAb,OAAa,gBAAb,C;cAAa,0B;cACT,aAAY,WAAc,MsH58CW,UtH48CzB,C;;;YsH58CgB,oBtH68CzB,a;YsH/8CS,iB;;;YAH4E,kBAAP,M;YAAO,eAA8B,a;Y9GpD9D,U;Y8GoDxC,gBxBnCpB,qCtFjB4D,uBDhDrD,auFiEU,6BvFjEV,wHCgDqD,oCsFiB5D,EAAiD,QAAjD,C;Y9F46CO,oBAAM,iBAAa,wBsHx4CN,StHw4CM,EAAwB,EAAxB,CAAb,C;YAuEA,U;YAAA,SsH/8CO,StH+8CP,W;YAAb,OAAa,gBAAb,C;cAAa,0B;cACT,aAAY,WAAc,MsHh9CS,UtHg9CvB,C;;;YsHh9Cc,oBtHi9CvB,a;YsHn9CS,iB;;;YAHsC,kBAAP,M;YAAO,eAA8B,a;Y9GhDxB,U;Y8GgDxC,YxB/BpB,qCtFjB4D,uBDhDrD,auFiEU,6BvFjEV,oHCgDqD,oCsFiB5D,EAAiD,QAAjD,C;Y9F46CO,oBAAM,iBAAa,wBsH54CN,KtH44CM,EAAwB,EAAxB,CAAb,C;YAuEA,U;YAAA,SsHn9CO,KtHm9CP,W;YAAb,OAAa,gBAAb,C;cAAa,0B;cACT,aAAY,WAAc,MsHp9CK,UtHo9CnB,C;;;YsHp9CU,oBtHq9CnB,a;YsHv9CS,iB;;;YAHsC,kBAAP,M;YAAO,eAA8B,a;Y9G5CxB,U;Y8G4CxC,YxB3BpB,qCtFjB4D,uBDhDrD,auFiEU,6BvFjEV,oHCgDqD,oCsFiB5D,EAAiD,QAAjD,C;Y9F46CO,oBAAM,iBAAa,wBsHh5CN,KtHg5CM,EAAwB,EAAxB,CAAb,C;YAuEA,W;YAAA,UsHv9CO,KtHu9CP,W;YAAb,OAAa,iBAAb,C;cAAa,2B;cACT,aAAY,WAAc,MsHx9CK,UtHw9CnB,C;;;YsHx9CU,oBtHy9CnB,a;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IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAAuB,kD;IAAM,oD;G;;EAAN,sC;IAAA,sB;IAAA,8B;G;;EAAM,uC;IAAA,sB;IAAA,+B;G;;EAA7B,4B;IAAA,oE;G;;EAAA,iC;IAAA,a;WAAA,M;QAAA,mC;WAAA,O;QAAA,oC;;QAAA,4F;;G;;EAEA,+B;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6B;IAAA,gC;K;IAAoB,8C;IAAO,wD;G;;EAAP,oC;IAAA,mB;IAAA,4B;G;;EAAO,yC;IAAA,mB;IAAA,iC;G;;EAA3B,yB;IAAA,oE;G;;EAAA,8B;IAAA,a;WAAA,O;QAAA,iC;WAAA,Y;QAAA,sC;;QAAA,yF;;G;;EAEA,gC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,8B;IAAA,iC;K;IAAqB,kD;IAAQ,4C;IAAK,wD;IAAW,4C;G;;EAAxB,sC;IAAA,oB;IAAA,8B;G;;EAAQ,mC;IAAA,oB;IAAA,2B;G;;EAAK,yC;IAAA,oB;IAAA,iC;G;;EAAW,mC;IAAA,oB;IAAA,2B;G;;EAA7C,0B;IAAA,4H;G;;EAAA,+B;IAAA,a;WAAA,Q;QAAA,mC;WAAA,K;QAAA,gC;WAAA,W;QAAA,sC;WAAA,K;QAAA,gC;;QAAA,0F;;G;;EAEA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAAiC,0E;IAAQ,oE;IAAK,gF;IAAW,oE;IAAK,kF;IAAY,8F;IAAkB,kF;IAAY,wF;IAAe,4E;IAAS,wF;G;;EAA/F,kD;IAAA,gC;IAAA,0C;G;;EAAQ,+C;IAAA,gC;IAAA,uC;G;;EAAK,qD;IAAA,gC;IAAA,6C;G;;EAAW,+C;IAAA,gC;IAAA,uC;G;;EAAK,sD;IAAA,gC;IAAA,8C;G;;EAAY,4D;IAAA,gC;IAAA,oD;G;;EAAkB,sD;IAAA,gC;IAAA,8C;G;;EAAY,yD;IAAA,gC;IAAA,iD;G;;EAAe,mD;IAAA,gC;IAAA,2C;G;;EAAS,yD;IAAA,gC;IAAA,iD;G;;EAAhI,sC;IAAA,yc;G;;EAAA,2C;IAAA,a;WAAA,Q;QAAA,+C;WAAA,K;QAAA,4C;WAAA,W;QAAA,kD;WAAA,K;QAAA,4C;WAAA,Y;QAAA,mD;WAAA,kB;QAAA,yD;WAAA,Y;QAAA,mD;WAAA,e;QAAA,sD;WAAA,S;QAAA,gD;WAAA,e;QAAA,sD;;QAAA,sG;;G;;EAEA,iC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IAAsB,wD;IAAU,4C;IAAI,4C;IAAI,4C;G;;EAAlB,yC;IAAA,qB;IAAA,iC;G;;EAAU,mC;IAAA,qB;IAAA,2B;G;;EAAI,mC;IAAA,qB;IAAA,2B;G;;EAAI,mC;IAAA,qB;IAAA,2B;G;;EAAxC,2B;IAAA,yH;G;;EAAA,gC;IAAA,a;WAAA,U;QAAA,sC;WAAA,I;QAAA,gC;WAAA,I;QAAA,gC;WAAA,I;QAAA,gC;;QAAA,2F;;G;;EAEA,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAAkC,gF;IAAU,oE;IAAI,oE;IAAI,oE;IAAI,sF;IAAa,sF;IAAa,sF;IAAa,0E;IAAO,0E;IAAO,0E;G;;EAA3E,qD;IAAA,iC;IAAA,6C;G;;EAAU,+C;IAAA,iC;IAAA,uC;G;;EAAI,+C;IAAA,iC;IAAA,uC;G;;EAAI,+C;IAAA,iC;IAAA,uC;G;;EAAI,wD;IAAA,iC;IAAA,gD;G;;EAAa,wD;IAAA,iC;IAAA,gD;G;;EAAa,wD;IAAA,iC;IAAA,gD;G;;EAAa,kD;IAAA,iC;IAAA,0C;G;;EAAO,kD;IAAA,iC;IAAA,0C;G;;EAAO,kD;IAAA,iC;IAAA,0C;G;;EAA7G,uC;IAAA,ub;G;;EAAA,4C;IAAA,a;WAAA,U;QAAA,kD;WAAA,I;QAAA,4C;WAAA,I;QAAA,4C;WAAA,I;QAAA,4C;WAAA,a;QAAA,qD;WAAA,a;QAAA,qD;WAAA,a;QAAA,qD;WAAA,O;QAAA,+C;WAAA,O;QAAA,+C;WAAA,O;QAAA,+C;;QAAA,uG;;G;;EAEA,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAAuB,kD;IAAM,wD;IAAS,kD;G;;EAAf,sC;IAAA,sB;IAAA,8B;G;;EAAM,yC;IAAA,sB;IAAA,iC;G;;EAAS,sC;IAAA,sB;IAAA,8B;G;;EAAtC,4B;IAAA,oG;G;;EAAA,iC;IAAA,a;WAAA,M;QAAA,mC;WAAA,S;QAAA,sC;WAAA,M;QAAA,mC;;QAAA,4F;;G;;EAEA,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAAwB,oD;IAAM,wD;IAAQ,kD;IAAK,oD;G;;EAAnB,uC;IAAA,uB;IAAA,+B;G;;EAAM,yC;IAAA,uB;IAAA,iC;G;;EAAQ,sC;IAAA,uB;IAAA,8B;G;;EAAK,uC;IAAA,uB;IAAA,+B;G;;EAA3C,6B;IAAA,oI;G;;EAAA,kC;IAAA,a;WAAA,M;QAAA,oC;WAAA,Q;QAAA,sC;WAAA,K;QAAA,mC;WAAA,M;QAAA,oC;;QAAA,6F;;G;;EAEA,+B;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6B;IAAA,gC;K;IAAoB,4C;IAAM,gD;IAAQ,0C;IAAK,4C;G;;EAAnB,mC;IAAA,mB;IAAA,2B;G;;EAAM,qC;IAAA,mB;IAAA,6B;G;;EAAQ,kC;IAAA,mB;IAAA,0B;G;;EAAK,mC;IAAA,mB;IAAA,2B;G;;EAAvC,yB;IAAA,oH;G;;EAAA,8B;IAAA,a;WAAA,M;QAAA,gC;WAAA,Q;QAAA,kC;WAAA,K;QAAA,+B;WAAA,M;QAAA,gC;;QAAA,yF;;G;;EAEA,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAAuB,kD;IAAM,kD;IAAM,kD;G;;EAAZ,sC;IAAA,sB;IAAA,8B;G;;EAAM,sC;IAAA,sB;IAAA,8B;G;;EAAM,sC;IAAA,sB;IAAA,8B;G;;EAAnC,4B;IAAA,iG;G;;EAAA,iC;IAAA,a;WAAA,M;QAAA,mC;WAAA,M;QAAA,mC;WAAA,M;QAAA,mC;;QAAA,4F;;G;;EAEA,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAAkC,8F;IAAiB,kF;IAAW,wF;G;;EAA5B,4D;IAAA,iC;IAAA,oD;G;;EAAiB,sD;IAAA,iC;IAAA,8C;G;;EAAW,yD;IAAA,iC;IAAA,iD;G;;EAA9D,uC;IAAA,0J;G;;EAAA,4C;IAAA,a;WAAA,iB;QAAA,yD;WAAA,W;QAAA,mD;WAAA,c;QAAA,sD;;QAAA,uG;;G;;EAEA,gD;IAAA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P,OsCpEyB,MAAlB,C;;gBAHK,qBhHxDlC,SF5DoC,Q;gBZSd,kBAArB,6B;gBaPR,IAHyB,KAGzB,C;kBCyDA,WDxDI,UAAS,sBAAW,I;kBCwDxB,WDvDI,IAAI,WAAW,kC;;kBCuDnB,WDrDI,UAAS,sBAAW,K;kBACpB,aAAQ,mC;kBhBdR,IADE,MACF,S;oBiBkEJ,WjBjEQ,QAAY,gB;oBCJiD,2B;;oBAAkB,uB;;;wBC0BpC,wE;;wBAGrD,sC;0BAHqD,sBAInD,I;0BAJmD,sB;;0BAAA,a;;;;oBe2CnD,WjBhEQ,YCLgD,mD;yBDOpD,kBALE,MAKF,mB;oBiB8DJ,WjB7DQ,QAAY,M;oBiB6DpB,WjB5DQ,YAAW,I;;oBiB4DnB,WjBzDQ,QAAY,M;oBCZiD,2B;;oBAAkB,uB;;;wBC0BpC,wE;;wBAGrD,sC;0BAHqD,sBAInD,I;0BAJmD,sB;;0BAAA,a;;;;oBe2CnD,WjBxDQ,YCbgD,mD;;;gBgIqI5B,IhHhE5B,WgHgE4B,8B;gB9H/He,gB;gCAAA,CAA7B,uBcgEP,WdhEO,OAA6B,e;oBAAA,qC;yBAAA,mB;gBAAA,Q;;gB8HqIb,aAAN,6BAAM,W;gBlHjIF,kBAApB,mB;gB4E2LQ,U;gBAAA,SDkKoE,iCAAQ,W;gBClK5F,OAAgB,gBAAhB,C;kBAAgB,6B;kB1EhIhB,WgHyEoC,gBtCuDP,SsCvDiB,IAAV,EtCuDP,SsCvDyB,MAAlB,C;;gBAHK,gB;gCAAA,wBhHrElC,WF5DoC,QkHiIF,EAMf,uEANe,O;oBAAA,qC;yBAAA,mB;gBAAA,Q;;;cAazB,6BAAM,4BAA2B,KAA3B,C;cACN,SAAO,eAAM,qEAAN,C;cAhCf,OAiCQ,6BAAM,4HAjCd,M;;;;YAAA,OAiBY,4BACqB,aADrB,EAUI,yBAVJ,CAjBZ,M;;YjH9GM,a;YiH8GN,OAIY,4BACqB,aADrB,EAUI,yBAVJ,CAJZ,M;;YAEI,gB;;;;;;;;;YAiCF,gC;cACE,6BAAM,4BAA2B,KAA3B,C;cACN,SAAO,eAAM,6CAAN,C;cACP,OAAQ,KAAI,CAAJ,C;cAtCZ,OAuCI,6BAAM,6G;;cAtCV,O;;;;;;;;;;;;;;;;;;;;;;;;G;EAFe,yI;IAAA,yD;qBAAA,8K;UAAA,S;eAAA,Q;;eAAA,uB;K;G;2CAfvB,8C;IAUI,SAAO,cAAK,mDAAL,C;ItCkFK,Q;IAAA,OsCjFZ,MvCmPgF,QAAQ,W;IClK5F,OAAgB,cAAhB,C;MAAgB,yB;MsCjFK,SAAO,cAAK,yCtCiFJ,OsCjFI,CAAL,C;;IAExB,UAAM,4BAA2B,IAA3B,C;IAEM,OAAZ,WAAY,kBAAO,6EAAP,C;G;EAyDA,0H;IAAA,mB;MACR,6CAAmC,cAAnC,mBAAqD,gBAArD,UAAiE,aAAM,KAAvE,eACQ,cAAO,KAAP,GAAc,CAAlB,GAAqB,4BAArB,GAAuD,EAD3D,C;K;G;EAGyB,4E;IAAA,mB;MAAE,mBAAU,UAAG,IAAb,iBAA4B,UAAG,M;K;G;EAmCnB,4N;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,gD;IAAA,wC;IAAA,gD;IAAA,0C;IAAA,4C;G;;;;sGAAA,Y;;;;;YAEL,WAAN,6BAAM,W;YACI,wC;YADO,iBAEF,S7G/Me,Y6G+ML,wB7G/MK,C6G+Mf,S;Y9HzMtB,kBAArB,6B;YckDR,WDlBA,UAAS,sBAAW,K;YACpB,aAAQ,kCAe+B,UAf/B,C;YhBjDJ,IADE,MACF,S;ciBkEJ,WjBjEQ,QAAY,gB;cCJiD,2B;;cAAkB,uB;;;kBC0BpC,sF;;kBAGrD,sC;oBAHqD,sBAInD,I;oBAJmD,sB;;oBAAA,a;;;;ce2CnD,WjBhEQ,YCLgD,mD;mBDOpD,kBALE,MAKF,mB;ciB8DJ,WjB7DQ,QAAY,M;ciB6DpB,WjB5DQ,YAAW,I;;ciB4DnB,WjBzDQ,QAAY,M;cCZiD,2B;;cAAkB,uB;;;kBC0BpC,sF;;kBAGrD,sC;oBAHqD,sBAInD,I;oBAJmD,sB;;oBAAA,a;;;;ce2CnD,WjBxDQ,YCbgD,mD;;;YeoExD,ICCA,WDDA,S;YCCA,WgHyJwC,mC;Y9HxNG,gB;4BAAA,CAA7B,uBcgEP,WdhEO,OAA6B,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;Ya6D7B,a;YiHsJkB,mCACqB,aADrB,C;;;;;;;;;;;;;;;G;EADe,yK;IAAA,yD;qBAAA,gN;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EAnBX,g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"}