{"version":3,"file":"ktor-ktor-websocket-serialization-js-legacy.js","sources":["../../../../../ktor-utils/js/src/io/ktor/util/reflect/TypeInfoJs.kt","../../../../../ktor-utils/common/src/io/ktor/util/reflect/Type.kt","../../../../../ktor-shared/ktor-websocket-serialization/common/src/io/ktor/websocket/serialization/WebsocketChannelSerialization.kt"],"sourcesContent":["/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.reflect\n\nimport kotlin.reflect.*\n\npublic actual interface Type\n\npublic object JsType : Type\n\n@OptIn(ExperimentalStdlibApi::class)\npublic actual inline fun <reified T> typeInfo(): TypeInfo = typeInfoImpl(JsType, T::class, tryGetType<T>())\n\npublic fun typeInfoImpl(reifiedType: Type, kClass: KClass<*>, kType: KType?): TypeInfo =\n    TypeInfo(kClass, reifiedType, kType)\n\n/**\n * Check [this] is instance of [type].\n */\npublic actual fun Any.instanceOf(type: KClass<*>): Boolean = type.isInstance(this)\n\npublic actual val KType.platformType: Type\n    get() = JsType\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.reflect\n\nimport kotlin.reflect.*\n\n/**\n * Information about type.\n */\npublic expect interface Type\n\npublic expect val KType.platformType: Type\n\n/**\n * Ktor type information.\n * @property type: source KClass<*>\n * @property reifiedType: type with substituted generics\n * @property kotlinType: kotlin reified type with all generic type parameters.\n */\npublic data class TypeInfo(\n    public val type: KClass<*>,\n    public val reifiedType: Type,\n    public val kotlinType: KType? = null\n)\n\n/**\n * Returns [TypeInfo] for the specified type [T]\n */\npublic expect inline fun <reified T> typeInfo(): TypeInfo\n\n/**\n * Check [this] is instance of [type].\n */\npublic expect fun Any.instanceOf(type: KClass<*>): Boolean\n\n@PublishedApi\n@OptIn(ExperimentalStdlibApi::class)\ninternal inline fun <reified T> tryGetType(): KType? = try {\n    // We need to wrap getting type in try catch because of https://youtrack.jetbrains.com/issue/KT-42913\n    typeOf<T>()\n} catch (cause: Throwable) {\n    null\n}\n","package io.ktor.websocket.serialization\n\nimport io.ktor.serialization.*\nimport io.ktor.util.reflect.*\nimport io.ktor.utils.io.charsets.*\nimport io.ktor.websocket.*\n\n/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\n/**\n * Serializes [data] to a frame and enqueues this frame.\n * May suspend if the [outgoing] queue is full.\n * If the [outgoing] channel is already closed, throws an exception, so it is impossible to transfer any message.\n * Frames sent after a Close frame are silently ignored.\n * Note that a Close frame could be sent automatically in reply to a peer's Close frame unless it is a raw WebSocket session.\n *\n * @param data The data to serialize\n * @param converter The WebSocket converter\n * @param charset Response charset\n */\npublic suspend inline fun <reified T> WebSocketSession.sendSerializedBase(\n    data: T,\n    converter: WebsocketContentConverter,\n    charset: Charset\n) {\n    val serializedData = converter.serializeNullable(\n        charset = charset,\n        typeInfo = typeInfo<T>(),\n        value = data\n    )\n    outgoing.send(serializedData)\n}\n\n/**\n * Dequeues a frame and deserializes it to the type [T] using [converter].\n * May throw [WebsocketDeserializeException] if the received frame type is not [Frame.Text] or [Frame.Binary].\n * In this case, [WebsocketDeserializeException.frame] contains the received frame.\n * May throw [ClosedReceiveChannelException] if a channel was closed\n *\n * @param converter The WebSocket converter\n * @param charset Response charset\n *\n * @returns A deserialized value or throws [WebsocketDeserializeException] if the [converter]\n * can't deserialize frame data to type [T]\n */\npublic suspend inline fun <reified T> WebSocketSession.receiveDeserializedBase(\n    converter: WebsocketContentConverter,\n    charset: Charset\n): Any? {\n    val frame = incoming.receive()\n\n    if (!converter.isApplicable(frame)) {\n        throw WebsocketDeserializeException(\n            \"Converter doesn't support frame type ${frame.frameType.name}\",\n            frame = frame\n        )\n    }\n\n    val typeInfo = typeInfo<T>()\n    val result = converter.deserialize(\n        charset = charset,\n        typeInfo = typeInfo,\n        content = frame\n    )\n\n    if (result is T) return result\n    if (result == null) {\n        if (typeInfo.kotlinType?.isMarkedNullable == true) return null\n        throw WebsocketDeserializeException(\"Frame has null content\", frame = frame)\n    }\n\n    throw WebsocketDeserializeException(\n        \"Can't deserialize value : expected value of type ${T::class.simpleName},\" +\n            \" got ${result::class.simpleName}\",\n        frame = frame\n    )\n}\n"],"names":[],"mappings":"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"}